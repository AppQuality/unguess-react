/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    /** Get all routes available for this apis */
    get: operations['get-root'];
    parameters: {};
  };
  '/authenticate': {
    /** A request to login with your username and password */
    post: operations['post-authenticate'];
  };
  '/analytics/views/campaigns/{cid}': {
    post: operations['post-analytics-views-campaigns-cid'];
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
  };
  '/campaigns': {
    post: operations['post-campaigns'];
    parameters: {};
  };
  '/campaigns/{cid}': {
    get: operations['get-campaign'];
    patch: operations['patch-campaigns'];
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
  };
  '/campaigns/{cid}/bugTypes': {
    get: operations['get-campaigns-cid-bug-types'];
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
  };
  '/campaigns/{cid}/bugs': {
    get: operations['get-campaigns-cid-bugs'];
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
  };
  '/campaigns/{cid}/bugs/{bid}': {
    get: operations['get-campaigns-single-bug'];
    patch: operations['patch-campaigns-cid-bugs-bid'];
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
        /** Defines an identifier for the bug object (BUG ID) */
        bid: components['parameters']['bid'];
      };
    };
  };
  '/campaigns/{cid}/bugs/{bid}/comments': {
    get: operations['get-campaigns-cid-bugs-bid-comments'];
    post: operations['post-campaigns-cid-bugs-bid-comments'];
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
        /** Defines an identifier for the bug object (BUG ID) */
        bid: components['parameters']['bid'];
      };
    };
  };
  '/campaigns/{cid}/bugs/{bid}/media': {
    post: operations['post-campaigns-cid-bugs-bid-media'];
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
        /** Defines an identifier for the bug object (BUG ID) */
        bid: string;
      };
    };
  };
  '/campaigns/{cid}/bugs/{bid}/comments/{cmid}': {
    post: operations['post-campaigns-cid-bugs-bid-comments-cmid-media'];
    delete: operations['delete-campaigns-cid-bugs-bid-comments-cmid'];
    parameters: {
      path: {
        cid: string;
        bid: string;
        cmid: string;
      };
    };
  };
  '/campaigns/{cid}/bugs/{bid}/siblings': {
    get: operations['get-campaigns-bug-siblings'];
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
        /** Defines an identifier for the bug object (BUG ID) */
        bid: string;
      };
    };
  };
  '/campaigns/{cid}/clusters': {
    get: operations['get-campaigns-cid-clusters'];
    parameters: {
      path: {
        cid: string;
      };
    };
  };
  '/campaigns/{cid}/custom_statuses': {
    get: operations['get-campaigns-cid-custom-statuses'];
    delete: operations['delete-campaigns-cid-custom_statuses'];
    patch: operations['patch-campaigns-cid-custom_statuses'];
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
  };
  '/campaigns/{cid}/devices': {
    get: operations['get-campaigns-cid-devices'];
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
  };
  '/campaigns/{cid}/findings/{fid}': {
    put: operations['put-campaigns-cid-findings-fid'];
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
        /** Finding id */
        fid: string;
      };
    };
  };
  '/campaigns/{cid}/insights': {
    get: operations['get-insights'];
    post: operations['post-insights'];
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
  };
  '/campaigns/{cid}/meta': {
    /** Used to extra info about a selected campaign */
    get: operations['get-campaigns-cid-meta'];
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
  };
  '/campaigns/{cid}/observations': {
    /**
     * Return all observations for a specificCampaigns.
     * You can group by observations for usecase and grapes (observations with same title) or get an ungrouped list.
     */
    get: operations['get-campaigns-cid-observations'];
    parameters: {
      path: {
        cid: string;
      };
    };
  };
  '/campaigns/{cid}/os': {
    get: operations['get-campaigns-cid-os'];
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
  };
  '/campaigns/{cid}/priorities': {
    get: operations['get-campaigns-cid-priorities'];
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
  };
  '/campaigns/{cid}/replicabilities': {
    /** Return all accepted replicabilities of a specific campaign */
    get: operations['get-campaigns-replicabilities'];
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
  };
  '/campaigns/{cid}/reports': {
    /** Return all available report of a specific campaign */
    get: operations['get-campaigns-reports'];
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
  };
  '/campaigns/{cid}/severities': {
    get: operations['get-campaigns-cid-severities'];
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
  };
  '/campaigns/{cid}/tags': {
    get: operations['get-campaigns-cid-tags'];
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
  };
  '/campaigns/{cid}/usecases': {
    get: operations['get-campaigns-cid-usecases'];
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
  };
  '/campaigns/{cid}/users': {
    /** Return a list of users from a specific campaign */
    get: operations['get-campaign-users'];
    /** Use this to add a new or existent user into a specific campaign. */
    post: operations['post-campaign-cid-users'];
    /** Remove an user from campaign */
    delete: operations['delete-campaign-cid-users'];
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
  };
  '/campaigns/{cid}/ux': {
    get: operations['get-campaigns-cid-ux'];
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
  };
  '/campaigns/{cid}/video-tags': {
    /** Retrieve all groups of public ux-tags for a specific campaign */
    get: operations['get-campaigns-cid-video-tags'];
    /** Add videoTags with groups to a specific campaign */
    post: operations['post-campaigns-cid-video-tags'];
    parameters: {
      path: {
        cid: string;
      };
    };
  };
  '/campaigns/{cid}/videos': {
    /** Return all published video for a specific campaign */
    get: operations['get-campaigns-cid-videos'];
    parameters: {
      path: {
        cid: string;
      };
    };
  };
  '/campaigns/{cid}/widgets': {
    get: operations['get-campaigns-cid-widgets-wslug'];
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
  };
  '/insights/{iid}': {
    get: operations['get-insights-iid'];
    delete: operations['delete-insights-iid'];
    patch: operations['patch-insights-iid'];
    parameters: {
      path: {
        /** Insight id */
        iid: components['parameters']['iid'];
      };
    };
  };
  '/media/{id}': {
    get: operations['get-media-id'];
    parameters: {
      path: {
        id: string;
      };
    };
  };
  '/media-comment/{mcid}': {
    /** Delete a media-comment */
    delete: operations['delete-media-comment-mcid'];
    parameters: {
      path: {
        mcid: string;
      };
    };
  };
  '/projects': {
    post: operations['post-projects'];
  };
  '/projects/{pid}': {
    /** Retrieve projects details from an ID. */
    get: operations['get-projects-projectId'];
    /** Update fields of a specific project. Currently only the project name is editable. */
    patch: operations['patch-projects-pid'];
    parameters: {
      path: {
        /** Project id */
        pid: components['parameters']['pid'];
      };
    };
  };
  '/projects/{pid}/campaigns': {
    get: operations['get-project-campaigns'];
    parameters: {
      path: {
        /** Project id */
        pid: components['parameters']['pid'];
      };
    };
  };
  '/projects/{pid}/users': {
    /** Return a list of users from a specific project */
    get: operations['get-projects-users'];
    /** Use this to add a new or existent user into a specific project. */
    post: operations['post-projects-pid-users'];
    /** Remove an user from project */
    delete: operations['delete-projects-pid-users'];
    parameters: {
      path: {
        /** Project id */
        pid: components['parameters']['pid'];
      };
    };
  };
  '/templates': {
    /** Retrieve all available use case templates */
    get: operations['get-templates'];
  };
  '/users/me': {
    get: operations['get-users-me'];
  };
  '/users/me/preferences': {
    get: operations['get-users-me-preferences'];
  };
  '/users/me/preferences/{prefid}': {
    put: operations['put-users-me-preferences-prefid'];
    parameters: {
      path: {
        prefid: string;
      };
    };
  };
  '/videos/{vid}': {
    /** Retrive single video data */
    get: operations['get-videos-vid'];
    parameters: {
      path: {
        vid: string;
      };
    };
  };
  '/videos/{vid}/observations': {
    /** Retrive all observations of a specific video */
    get: operations['get-videos-vid-observations'];
    post: operations['post-videos-vid-observations'];
    parameters: {
      path: {
        vid: string;
      };
    };
  };
  '/videos/{vid}/observations/{oid}': {
    /** delete an observation */
    delete: operations['delete-videos-vid-observations-oid'];
    /** Update partial data of a video observation. */
    patch: operations['patch-videos-vid-observations-oid'];
    parameters: {
      path: {
        vid: string;
        oid: string;
      };
    };
  };
  '/videos/{vid}/translation': {
    post: operations['post-videos-vid-translation'];
    parameters: {
      path: {
        vid: string;
      };
    };
  };
  '/workspaces': {
    get: operations['get-workspaces'];
    /** This endpoint is useful to add a new workspace. Only admin can use this. */
    post: operations['post-workspaces'];
  };
  '/workspaces/{wid}': {
    get: operations['get-workspace'];
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components['parameters']['wid'];
      };
    };
  };
  '/workspaces/{wid}/campaigns': {
    get: operations['get-workspace-campaigns'];
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components['parameters']['wid'];
      };
    };
  };
  '/workspaces/{wid}/coins': {
    get: operations['get-workspaces-coins'];
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components['parameters']['wid'];
      };
    };
  };
  '/workspaces/{wid}/projects': {
    get: operations['get-workspace-projects'];
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components['parameters']['wid'];
      };
    };
  };
  '/workspaces/{wid}/projects/{pid}': {
    get: operations['get-workspace-project'];
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components['parameters']['wid'];
        /** Project id */
        pid: components['parameters']['pid'];
      };
    };
  };
  '/workspaces/{wid}/projects/{pid}/campaigns': {
    get: operations['get-workspace-project-campaigns'];
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components['parameters']['wid'];
        /** Project id */
        pid: components['parameters']['pid'];
      };
    };
  };
  '/workspaces/{wid}/users': {
    /** Return a list of users from a specific workspace */
    get: operations['get-workspaces-users'];
    /** Use this to add a new or existent user into a specific workspace. */
    post: operations['post-workspaces-wid-users'];
    /** Remove an user from workspace */
    delete: operations['delete-workspaces-wid-users'];
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components['parameters']['wid'];
      };
    };
  };
}

export interface components {
  schemas: {
    /** Authentication */
    Authentication: {
      id: number;
      /** Format: email */
      email: string;
      role: string;
      name: string;
      picture?: string;
      token: string;
      iat?: number;
      exp?: number;
    };
    /** Bug */
    Bug: {
      id: number;
      internal_id: string;
      campaign_id: number;
      title: components['schemas']['BugTitle'];
      step_by_step: string;
      expected_result: string;
      current_result: string;
      status: components['schemas']['BugStatus'];
      severity: components['schemas']['BugSeverity'];
      type: components['schemas']['BugType'];
      replicability: components['schemas']['BugReplicability'];
      priority: components['schemas']['BugPriority'];
      custom_status: components['schemas']['BugCustomStatus'];
      created: string;
      occurred_date: string;
      updated?: string;
      note?: string;
      device:
        | components['schemas']['Smartphone']
        | components['schemas']['Tablet']
        | components['schemas']['Desktop'];
      application_section: {
        id?: number;
        prefix_title?: string;
        title?: string;
        simple_title?: string;
      };
      duplicated_of_id?: number;
      is_favorite?: number;
      read?: boolean;
    };
    /**
     * BugAdditionalField
     * @description Describe any additional info
     */
    BugAdditionalField: {
      id: number;
      name: string;
      value: string;
    } & (
      | components['schemas']['BugAdditionalFieldRegex']
      | components['schemas']['BugAdditionalFieldSelect']
    );
    /** BugAdditionalFieldRegex */
    BugAdditionalFieldRegex: {
      validation: string;
      /** @enum {string} */
      kind: 'regex';
    };
    /** BugAdditionalFieldSelect */
    BugAdditionalFieldSelect: {
      options: string[];
      /** @enum {string} */
      kind: 'select';
    };
    /** BugComment */
    BugComment: {
      id: number;
      text: string;
      creation_date: string;
      creator: {
        id: number;
        name: string;
        isInternal: boolean;
      };
      media?: {
        url: string;
        id: number;
        type: string;
      }[];
    };
    /** BugCustomStatus */
    BugCustomStatus: {
      id: number;
      name: string;
      color: string;
      phase: components['schemas']['BugCustomStatusPhase'];
      is_default: number;
    };
    /** BugCustomStatusPhase */
    BugCustomStatusPhase: {
      id: number;
      name: string;
    };
    /** BugMedia */
    BugMedia: {
      mime_type: {
        /** @enum {string} */
        type: 'video' | 'image' | 'other';
        extension: string;
      };
      /** Format: uri */
      url: string;
      creation_date: string;
    };
    /** BugPriority */
    BugPriority: {
      id: number;
      name: string;
    };
    /** BugReplicability */
    BugReplicability: {
      id: number;
      name: string;
    };
    /** BugSeverity */
    BugSeverity: {
      id: number;
      name: string;
    };
    /** BugStatus */
    BugStatus: {
      id: number;
      name: string;
    };
    /** BugTag */
    BugTag: {
      id: number;
      tag_id: number;
      name: string;
      slug: string;
      bug_id: number;
      campaign_id: number;
      author_wp_id?: number;
      author_tid?: number;
      creation_date: string;
      is_visible_to_customer?: number;
    };
    /** BugTitle */
    BugTitle: {
      full: string;
      /** @description Bug title without context. */
      compact: string;
      context?: string[];
    };
    /** BugType */
    BugType: {
      id: number;
      name: string;
    };
    /** Campaign */
    Campaign: {
      id: number;
      start_date: string;
      end_date: string;
      close_date: string;
      title: string;
      customer_title: string;
      is_public: number;
      /**
       * @description -1: no bug form;
       * 0: only bug form;
       * 1: bug form with bug parade;
       */
      bug_form?: number;
      type: {
        id: number;
        name: string;
      };
      family: {
        id: number;
        name: string;
      };
      status: {
        id: number;
        name: string;
      };
      project: {
        id: number;
        name: string;
      };
      workspace: {
        id: number;
        name: string;
      };
      description?: string;
      base_bug_internal_id?: string;
    };
    /** CampaignWithOutput */
    CampaignWithOutput: components['schemas']['Campaign'] & {
      outputs?: components['schemas']['Output'][];
    };
    /** Cluster */
    Cluster: {
      id: number;
      name: string;
    };
    /**
     * Coin
     * @description A coin package is a set of coins (free or paid).
     * The coin only valid currency in order to run an express campaign (no matter what type of express)
     */
    Coin: {
      id: number;
      customer_id: number;
      /** @description Number of available coin */
      amount: number;
      agreement_id?: number;
      /**
       * Format: float
       * @description This is the single coin price
       * @default 0
       */
      price?: number;
      created_on?: string;
      /** @description On each coin use, the related package will be updated */
      updated_on?: string;
    };
    /** Desktop */
    Desktop: {
      desktop_type: string;
      os: string;
      os_version: string;
      /** @enum {string} */
      type: 'desktop';
    };
    /** Error */
    Error: {
      message: string;
      code: number;
      error: boolean;
    };
    /**
     * Feature
     * @description Flags used to enable functionality to some users
     */
    Feature: {
      slug?: string;
      name?: string;
    };
    /** Generic Device */
    GenericDevice: {
      os?: string;
      os_version?: string;
      type?: string;
    };
    /** Grape */
    Grapes: {
      title: string;
      severity: string;
      usersNumber: number;
      observations: (components['schemas']['Observation'] & {
        uploaderId: number;
        mediaId: number;
        deviceType: string;
        usecaseTitle: string;
      })[];
    };
    /** Insight */
    Insight: {
      id: number;
      title: string;
      description: string;
      severity: {
        id: number;
        name: string;
        style: string;
      };
      visible?: number;
      comment?: string;
      observations: (components['schemas']['Observation'] & {
        video: {
          id: number;
          deviceType: string;
        };
        uploaderId: number;
        usecaseTitle: string;
      })[];
    };
    /** Observation */
    Observation: {
      id: number;
      title: string;
      description: string;
      /** Format: float */
      start: number;
      /** Format: float */
      end: number;
      quotes: string;
      uxNote?: string;
      tags: components['schemas']['VideoTag'][];
    };
    /**
     * Output
     * @description campaign output item
     * @enum {string}
     */
    Output: 'bugs' | 'media' | 'insights';
    /** PaginationData */
    PaginationData: {
      start?: number;
      size?: number;
      limit?: number;
      total?: number;
    };
    Paragraph: {
      text: string;
      start: number;
      end: number;
      /** @description Id Of speaker */
      speaker?: number;
      words: components['schemas']['Word'][];
    };
    /** Platform Object */
    Platform: {
      /** @description os */
      id: number;
      /**
       * @description form_factor
       *
       * 0 => smartphone,
       * 1 => tablet
       * 2 => pc
       * 3 => smartwatch
       * 4 => console
       * 5 => tv
       */
      deviceType: number;
    };
    /** Project */
    Project: {
      id: number;
      name: string;
      campaigns_count: number;
      workspaceId: number;
    };
    /** Report */
    Report: {
      id?: number;
      title?: string;
      description?: string;
      url: string;
      file_type?: {
        extension?: components['schemas']['ReportExtensions'];
        type: string;
        domain_name?: string;
      };
      creation_date?: string;
      update_date?: string;
    };
    /**
     * ReportExtensions
     * @enum {string}
     */
    ReportExtensions:
      | 'pdf'
      | 'doc'
      | 'docx'
      | 'xls'
      | 'xlsx'
      | 'ppt'
      | 'pptx'
      | 'rar'
      | 'txt'
      | 'csv'
      | 'zip'
      | 'gzip'
      | 'gz'
      | '7z';
    /** Smartphone */
    Smartphone: {
      manufacturer: string;
      model: string;
      os: string;
      os_version: string;
      /** @enum {string} */
      type: 'smartphone';
    };
    /** Tablet */
    Tablet: {
      manufacturer: string;
      model: string;
      os: string;
      os_version: string;
      /** @enum {string} */
      type: 'tablet';
    };
    /**
     * Template
     * @description Template of a usecase object
     */
    Template: {
      title: string;
      /** @description Short description used as preview of template or in templates dropdown */
      description?: string;
      /** @description HTML content used to pre-fill the use case editor */
      content?: string;
      category?: components['schemas']['TemplateCategory'];
      /** @enum {string} */
      device_type?: 'webapp' | 'mobileapp';
      /**
       * @default en
       * @enum {string}
       */
      locale?: 'en' | 'it';
      /** Format: uri */
      image?: string;
      /**
       * @description The use case created by this template needs a login or not?
       * @default false
       */
      requiresLogin?: boolean;
    };
    /**
     * TemplateCategory
     * @description Group different templates
     */
    TemplateCategory: {
      id?: number;
      name: string;
    };
    /** Tenant */
    Tenant: {
      /** @description tryber wp_user_id */
      id: number;
      profile_id: number;
      name: string;
      email: string;
      invitationPending: boolean;
      permissionFrom?: {
        /** @enum {string} */
        type?: 'workspace' | 'project';
        id?: number;
      };
    };
    Transcript: {
      /** @description Number of spekers */
      speakers: number;
      paragraphs: components['schemas']['Paragraph'][];
    };
    /** UseCase */
    UseCase: {
      title: string;
      description: string;
      /** @description Optional in experiential campaigns */
      functionality?: {
        id?: number;
      } & components['schemas']['Template'];
      logged?: boolean;
      link?: string;
    };
    /** User */
    User: {
      /** @description This is the main id of the user. Currently is equal to tryber_wp_user_id */
      id: number;
      /** Format: email */
      email: string;
      role: string;
      name: string;
      profile_id: number;
      tryber_wp_user_id: number;
      unguess_wp_user_id: number;
      picture?: string;
      features?: components['schemas']['Feature'][];
    };
    /** UserPreference */
    UserPreference: {
      preference_id: number;
      value: number;
      name: string;
    };
    /**
     * Video
     * @description Video uploaded from a user
     */
    Video: {
      id: number;
      url: string;
      streamUrl?: string;
      poster?: string;
      duration?: number;
      tester: {
        id: number;
        name: string;
        surname: string;
        device: {
          /** @enum {string} */
          type: 'smartphone' | 'tablet' | 'desktop' | 'other';
        };
      };
      transcript?: components['schemas']['Transcript'];
    };
    /** VideoTag */
    VideoTag: {
      group: {
        id: number;
        name: string;
      };
      tag: {
        id: number;
        name: string;
        style: string;
        usageNumber: number;
      };
    };
    /**
     * WidgetBugsByDevice
     * @description Returns a list of devices with the number of bugs
     */
    WidgetBugsByDevice: {
      data: ((
        | components['schemas']['Smartphone']
        | components['schemas']['Desktop']
        | components['schemas']['Tablet']
      ) & {
        unique_bugs: number;
        /** @description Unique bugs */
        bugs: number;
      })[];
      /**
       * @default bugsByDevice
       * @example bugsByDevice
       * @enum {string}
       */
      kind: 'bugsByDevice';
    };
    /**
     * WidgetBugsByDuplicates
     * @description Returns the most 10 reported bugs ordered by numberd of duplicates
     */
    WidgetBugsByDuplicates: {
      data: (components['schemas']['Bug'] & {
        duplicates: number;
      })[];
      /** @enum {string} */
      kind: 'bugsByDuplicates';
    };
    /**
     * WidgetBugsByUseCase
     * @description Returns a list of use case with the number of bugs
     */
    WidgetBugsByUseCase: {
      data: {
        title: {
          full: string;
          simple?: string;
          prefix?: string;
          info?: string;
        };
        description: string;
        uniqueBugs?: number;
        bugs: number;
        usecase_completion?: number;
        usecase_id: number;
      }[];
      /**
       * @default bugsByUseCase
       * @example bugsByUseCase
       * @enum {string}
       */
      kind: 'bugsByUseCase';
    };
    /**
     * WidgetCampaignProgress
     * @description Used to show an overview about a specific campaign.
     */
    WidgetCampaignProgress: {
      data: {
        start_date: string;
        end_date: string;
        /**
         * Format: float
         * @description Percentage fixed rate of completion
         * @enum {number}
         */
        usecase_completion: 12.5 | 37.5 | 62.5 | 87.5 | 100;
        /** @description Number of hours from start_date */
        time_elapsed: number;
        /** @description Expected amount of hours required to complete the campaign */
        expected_duration: number;
      };
      /**
       * @default campaignProgress
       * @example campaignProgress
       * @enum {string}
       */
      kind: 'campaignProgress';
    };
    /**
     * WidgetCampaignUniqueBugs
     * @description Used to show an overview of unique bugs and its trent
     */
    WidgetCampaignUniqueBugs: {
      data: {
        unique: number;
        total: number;
        trend: number;
      };
      /**
       * @default campaignUniqueBugs
       * @example campaignUniqueBugs
       * @enum {string}
       */
      kind: 'campaignUniqueBugs';
    };
    /**
     * WidgetCampaignUxProgress
     * @description Used to show an overview of Ux progress
     */
    WidgetCampaignUxProgress: {
      data: {
        countMediaWithObservation?: number;
        countMedia?: number;
        countTitleTag?: number;
        countObservation?: number;
        countObservationNoTitle?: number;
        countRecurrentTitles?: number;
        severitiesDistribution?: {
          countPositiveFindings: number;
          countMinorIssue: number;
          countMajorIssue: number;
          countObservations: number;
        };
        mostUsedTitles?: {
          title: string;
          usage: number;
          mainSeverityAssignment: string;
        }[];
      };
      /**
       * @default uxTaggingVideoCompletion
       * @example uxTaggingVideoCompletion
       * @enum {string}
       */
      kind:
        | 'uxTaggingVideoCompletion'
        | 'uxTotalTitlesVsRecurrentTitles'
        | 'uxSeveritiesDistribution'
        | 'uxMostUsedTitles';
    };
    Word: {
      start: number;
      end: number;
      /** @description Id of Speaker */
      speaker?: number;
      word: string;
    };
    /**
     * Workspace
     * @description A workspace is the company area with projects and campaigns
     */
    Workspace: {
      id: number;
      company: string;
      tokens: number;
      logo?: string;
      csm: {
        id: number;
        email: string;
        name: string;
        profile_id: number;
        tryber_wp_user_id: number;
        picture?: string;
        url?: string;
      };
      /** @description express coins */
      coins?: number;
      /** @description Do this workspace have shared items? */
      isShared?: boolean;
      /** @description Number of shared items */
      sharedItems?: number;
    };
    /** WidgetCampaignUxTaggingVideoCompletionData */
    WidgetCampaignUxTaggingVideoCompletionData: {
      data: {
        countMediaWithObservation: number;
        countMedia: number;
      };
      /** @enum {undefined} */
      kind: 'uxTaggingVideoCompletion';
    };
    /** WidgetCampaignUxTotalTitlesVsRecurrentTitles */
    WidgetCampaignUxTotalTitlesVsRecurrentTitles: {
      data: {
        countTitleTag: number;
        countObservationNoTitle: number;
        countRecurrentTitles: number;
      };
      /** @enum {undefined} */
      kind: 'uxTotalTitlesVsRecurrentTitles';
    };
    /** WidgetCampaignUxSeveritiesDistribution */
    WidgetCampaignUxSeveritiesDistribution: {
      data: {
        countObservations: number;
        severitiesDistribution: {
          countPositiveFindings: number;
          countMinorIssue: number;
          countMajorIssue: number;
          countObservationSeverity: number;
        };
      };
      /** @enum {undefined} */
      kind: 'uxSeveritiesDistribution';
    };
    /** WidgetCampaignUxMostUsedTitles */
    WidgetCampaignUxMostUsedTitles: {
      data: {
        mostUsedTitles: {
          title: string;
          usage: number;
          mainSeverityAssignment: string;
        }[];
      };
      /** @enum {undefined} */
      kind: 'uxMostUsedTitles';
    };
  };
  responses: {
    /** Shared error response */
    Error: {
      content: {
        'application/json': components['schemas']['Error'];
      };
    };
  };
  parameters: {
    /** @description Workspace (company, customer) id */
    wid: string;
    /** @description Project id */
    pid: string;
    /** @description Limit pagination parameter */
    limit: number;
    /** @description Start pagination parameter */
    start: number;
    /** @description Order value (ASC, DESC) */
    order: string;
    /** @description Order by accepted field */
    orderBy: string;
    /** @description filterBy[<fieldName>]=<fieldValue> */
    filterBy: unknown;
    /** @description Campaign id */
    cid: string;
    /** @description Defines an identifier for the bug object (BUG ID) */
    bid: string;
    /** @description Campaign widget slug */
    wslug:
      | 'bugs-by-usecase'
      | 'bugs-by-device'
      | 'cp-progress'
      | 'unique-bugs'
      | 'bugs-by-duplicates'
      | 'ux-tagging-video-completion'
      | 'ux-total-titles-vs-recurrent-titles'
      | 'ux-severities-distribution'
      | 'ux-most-used-titles';
    /** @description keywords to search */
    search: string;
    /** @description Custom Status id */
    csid: string;
    /** @description Insight id */
    iid: string;
  };
  requestBodies: {
    Credentials: {
      content: {
        'application/json': {
          username: string;
          password: string;
        };
      };
    };
    Campaign: {
      content: {
        'application/json': {
          title: string;
          start_date: string;
          end_date: string;
          close_date: string;
          customer_title?: string;
          status_id?: number;
          is_public?: number;
          campaign_type_id: number;
          project_id: number;
          pm_id: number;
          platforms: components['schemas']['Platform'][];
          /** @description Da togliere */
          page_preview_id?: number;
          /** @description Da togliere */
          page_manual_id?: number;
          /** @description Used to check available coins */
          customer_id: number;
          has_bug_form?: number;
          /** @description if has_bug_form is 0 this has to be 0 */
          has_bug_parade?: number;
          description?: string;
          base_bug_internal_id?: string;
          express_slug: string;
          use_cases?: components['schemas']['UseCase'][];
          productType?: number;
          productLink?: string;
          browsers?: number[];
          languages?: number[];
          outOfScope?: string;
          testerRequirements?: string;
          targetSize?: number;
          goal?: string;
          testDescription?: string;
        };
      };
    };
    Project: {
      content: {
        'application/json': {
          name: string;
          customer_id: number;
        };
      };
    };
    Invitation: {
      content: {
        'application/json': {
          email: string;
          name?: string;
          surname?: string;
          locale?: string;
          event_name?: string;
          redirect_url?: string;
          message?: string;
        };
      };
    };
  };
}

export interface operations {
  /** Get all routes available for this apis */
  'get-root': {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': { [key: string]: unknown };
        };
      };
      500: components['responses']['Error'];
    };
  };
  /** A request to login with your username and password */
  'post-authenticate': {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Authentication'];
        };
      };
      500: components['responses']['Error'];
    };
    requestBody: components['requestBodies']['Credentials'];
  };
  'post-analytics-views-campaigns-cid': {
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            success?: boolean;
          };
        };
      };
      500: components['responses']['Error'];
    };
  };
  'post-campaigns': {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Campaign'];
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      404: components['responses']['Error'];
      500: components['responses']['Error'];
    };
    requestBody: components['requestBodies']['Campaign'];
  };
  'get-campaign': {
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['CampaignWithOutput'];
        };
      };
    };
  };
  'patch-campaigns': {
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Campaign'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          customer_title?: string;
        };
      };
    };
  };
  'get-campaigns-cid-bug-types': {
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['BugType'][];
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  'get-campaigns-cid-bugs': {
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
      query: {
        /** Limit pagination parameter */
        limit?: components['parameters']['limit'];
        /** Start pagination parameter */
        start?: components['parameters']['start'];
        /** Order value (ASC, DESC) */
        order?: components['parameters']['order'];
        /** Order by accepted field */
        orderBy?: components['parameters']['orderBy'];
        /** filterBy[<fieldName>]=<fieldValue> */
        filterBy?: components['parameters']['filterBy'];
        /** keywords to search */
        search?: components['parameters']['search'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            items?: (components['schemas']['Bug'] & {
              tags?: {
                tag_id: number;
                tag_name: string;
              }[];
              siblings: number;
              comments: number;
            })[];
            start?: number;
            limit?: number;
            size?: number;
            total?: number;
          };
        };
      };
      400: components['responses']['Error'];
      401: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  'get-campaigns-single-bug': {
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
        /** Defines an identifier for the bug object (BUG ID) */
        bid: components['parameters']['bid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Bug'] & {
            media: components['schemas']['BugMedia'][];
            tags: components['schemas']['BugTag'][];
            additional_fields: components['schemas']['BugAdditionalField'][];
            reporter: {
              tester_id: number;
              name: string;
            };
          };
        };
      };
      400: components['responses']['Error'];
      401: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  'patch-campaigns-cid-bugs-bid': {
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
        /** Defines an identifier for the bug object (BUG ID) */
        bid: components['parameters']['bid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            tags?: {
              tag_id: number;
              tag_name: string;
            }[];
            priority?: components['schemas']['BugPriority'];
            custom_status?: components['schemas']['BugCustomStatus'];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          tags?: (
            | {
                tag_id: number;
              }
            | {
                tag_name: string;
              }
          )[];
          priority_id?: number;
          custom_status_id?: number;
        };
      };
    };
  };
  'get-campaigns-cid-bugs-bid-comments': {
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
        /** Defines an identifier for the bug object (BUG ID) */
        bid: components['parameters']['bid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            items: components['schemas']['BugComment'][];
          };
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  'post-campaigns-cid-bugs-bid-comments': {
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
        /** Defines an identifier for the bug object (BUG ID) */
        bid: components['parameters']['bid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['BugComment'];
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
    requestBody: {
      content: {
        'application/json': {
          text: string;
          mentioned?: {
            id: number;
          }[];
          media_id?: {
            id: number;
          }[];
        };
      };
    };
  };
  'post-campaigns-cid-bugs-bid-media': {
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
        /** Defines an identifier for the bug object (BUG ID) */
        bid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            failed?: {
              name: string;
              /** @enum {string} */
              errorCode:
                | 'FILE_TOO_BIG'
                | 'INVALID_FILE_EXTENSION'
                | 'GENERIC_ERROR';
            }[];
            uploaded_ids?: {
              id: number;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          media: string | string[];
        };
      };
    };
  };
  'post-campaigns-cid-bugs-bid-comments-cmid-media': {
    parameters: {
      path: {
        cid: string;
        bid: string;
        cmid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            files?: {
              name: string;
              path: string;
            }[];
            failed?: {
              name: string;
              /** @enum {string} */
              errorCode:
                | 'FILE_TOO_BIG'
                | 'INVALID_FILE_EXTENSION'
                | 'GENERIC_ERROR';
            }[];
            uploaded_ids?: {
              id: number;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          media: string | string[];
        };
      };
    };
  };
  'delete-campaigns-cid-bugs-bid-comments-cmid': {
    parameters: {
      path: {
        cid: string;
        bid: string;
        cmid: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
    requestBody: {
      content: {
        'application/json': { [key: string]: unknown };
      };
    };
  };
  'get-campaigns-bug-siblings': {
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
        /** Defines an identifier for the bug object (BUG ID) */
        bid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            father?: {
              id: number;
              title: {
                full: string;
                compact: string;
                context?: string[];
              };
              context?: string;
              device: string;
              os: {
                name: string;
                version: string;
              };
            };
            siblings: {
              id: number;
              title: {
                full: string;
                compact: string;
                context?: string[];
              };
              context?: string;
              device: string;
              os: {
                name: string;
                version: string;
              };
            }[];
          };
        };
      };
      400: components['responses']['Error'];
      401: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  'get-campaigns-cid-clusters': {
    parameters: {
      path: {
        cid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            items?: components['schemas']['Cluster'][];
          };
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  'get-campaigns-cid-custom-statuses': {
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['BugCustomStatus'][];
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  'delete-campaigns-cid-custom_statuses': {
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            status?: boolean;
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          custom_status_id: number;
          to_custom_status_id?: number;
        }[];
      };
    };
  };
  'patch-campaigns-cid-custom_statuses': {
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['BugCustomStatus'][];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description se esiste già questo parametro viene passato nel request body\r\nse invece non esiste ed il custom status deve essere creato, non viene passato */
          custom_status_id?: number;
          name: string;
          color: string;
        }[];
      };
    };
  };
  'get-campaigns-cid-devices': {
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            device: string;
          }[];
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  'put-campaigns-cid-findings-fid': {
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
        /** Finding id */
        fid: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        'application/json': {
          comment: string;
        };
      };
    };
  };
  'get-insights': {
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': (components['schemas']['Insight'] & {
            usecases: {
              id: number;
              name: string;
            }[];
          })[];
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  'post-insights': {
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Insight'];
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
    requestBody: {
      content: {
        'application/json': {
          title: string;
          description?: string;
          severity_id: number;
          observations_ids: number[];
          comment?: string;
          visible?: number;
        };
      };
    };
  };
  /** Used to extra info about a selected campaign */
  'get-campaigns-cid-meta': {
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Campaign'] & {
            selected_testers: number;
            /** @description Array of form factors */
            allowed_devices: string[];
          };
        };
      };
      400: components['responses']['Error'];
      401: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  /**
   * Return all observations for a specificCampaigns.
   * You can group by observations for usecase and grapes (observations with same title) or get an ungrouped list.
   */
  'get-campaigns-cid-observations': {
    parameters: {
      path: {
        cid: string;
      };
      query: {
        groupBy?: 'usecase-grapes';
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json':
            | {
                results: {
                  usecaseId: number;
                  usecaseTitle: string;
                  grapes: components['schemas']['Grapes'][];
                  ungrouped: (components['schemas']['Observation'] & {
                    uploaderId: number;
                    mediaId: number;
                    deviceType: string;
                    usecaseTitle: string;
                  })[];
                }[];
                /**
                 * @default usecase-grapes
                 * @example usecase-grapes
                 * @enum {string}
                 */
                kind: 'usecase-grapes';
              }
            | {
                results: (components['schemas']['Observation'] & {
                  uploaderId: number;
                  mediaId: number;
                  deviceType: string;
                  usecaseTitle: string;
                })[];
                /**
                 * @default ungrouped
                 * @example ungrouped
                 * @enum {string}
                 */
                kind: 'ungrouped';
              };
        };
      };
    };
  };
  'get-campaigns-cid-os': {
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            os: string;
          }[];
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  'get-campaigns-cid-priorities': {
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['BugPriority'][];
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  /** Return all accepted replicabilities of a specific campaign */
  'get-campaigns-replicabilities': {
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['BugReplicability'][];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  /** Return all available report of a specific campaign */
  'get-campaigns-reports': {
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Report'][];
        };
      };
    };
  };
  'get-campaigns-cid-severities': {
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['BugSeverity'][];
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  'get-campaigns-cid-tags': {
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            tag_id: number;
            display_name: string;
            slug: string;
            is_public?: number;
          }[];
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  'get-campaigns-cid-usecases': {
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            id: number;
            title: {
              full: string;
              simple?: string;
              prefix?: string;
              info?: string;
            };
            completion: number;
          }[];
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  /** Return a list of users from a specific campaign */
  'get-campaign-users': {
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
      query: {
        /** Limit pagination parameter */
        limit?: components['parameters']['limit'];
        /** Start pagination parameter */
        start?: components['parameters']['start'];
        /** Order value (ASC, DESC) */
        order?: components['parameters']['order'];
        /** Order by accepted field */
        orderBy?: components['parameters']['orderBy'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            items: components['schemas']['Tenant'][];
            start?: number;
            limit?: number;
            size?: number;
            total?: number;
          };
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  /** Use this to add a new or existent user into a specific campaign. */
  'post-campaign-cid-users': {
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            profile_id: number;
            tryber_wp_user_id: number;
            email: string;
          };
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
    requestBody: components['requestBodies']['Invitation'];
  };
  /** Remove an user from campaign */
  'delete-campaign-cid-users': {
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            items: components['schemas']['Tenant'][];
          };
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description Tryber WP USER ID */
          user_id: number;
        };
      };
    };
  };
  'get-campaigns-cid-ux': {
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
      query: {
        showAsCustomer?: boolean;
        /** filterBy[<fieldName>]=<fieldValue> */
        filterBy?: components['parameters']['filterBy'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            goal?: string;
            users?: number;
            findings?: {
              /** @description this field is the Finding ID */
              id: number;
              title: string;
              description: string;
              comment?: string;
              severity: {
                id: number;
                name: string;
                style: string;
              };
              cluster:
                | {
                    id: number;
                    name: string;
                  }[]
                | 'all';
              video?: {
                url: string;
                streamUrl: string;
                poster?: string;
                start: number;
                end: number;
                description?: string;
              }[];
            }[];
            sentiment?: {
              cluster: {
                id: number;
                name: string;
              };
              value: number;
              comment: string;
            }[];
            methodology?: {
              type: string;
              description: string;
            };
            questions?: {
              text: string;
            }[];
          };
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      404: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  /** Retrieve all groups of public ux-tags for a specific campaign */
  'get-campaigns-cid-video-tags': {
    parameters: {
      path: {
        cid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            group: {
              id: number;
              name: string;
            };
            tags: {
              id: number;
              name: string;
              style: string;
              usageNumber: number;
            }[];
          }[];
        };
      };
    };
  };
  /** Add videoTags with groups to a specific campaign */
  'post-campaigns-cid-video-tags': {
    parameters: {
      path: {
        cid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['VideoTag'];
        };
      };
    };
    /** If there is a group, post new tag into that group; otherwise, create the group and add tag into the new group. */
    requestBody: {
      content: {
        'application/json': {
          group: {
            name: string;
          };
          tag: {
            name: string;
            style?: string;
          };
        };
      };
    };
  };
  /** Return all published video for a specific campaign */
  'get-campaigns-cid-videos': {
    parameters: {
      path: {
        cid: string;
      };
      query: {
        /** Limit pagination parameter */
        limit?: components['parameters']['limit'];
        /** Start pagination parameter */
        start?: components['parameters']['start'];
        /** Order value (ASC, DESC) */
        order?: components['parameters']['order'];
        /** Order by accepted field */
        orderBy?: components['parameters']['orderBy'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            items: {
              usecase: {
                id: number;
                title: string;
                description: string;
                completion: number;
              };
              videos: (components['schemas']['Video'] & {
                observations?: components['schemas']['Observation'][];
              })[];
            }[];
          } & components['schemas']['PaginationData'];
        };
      };
    };
  };
  'get-campaigns-cid-widgets-wslug': {
    parameters: {
      path: {
        /** Campaign id */
        cid: components['parameters']['cid'];
      };
      query: {
        /** Campaign widget slug */
        s: components['parameters']['wslug'];
        /** should update bug trend after request resolves? */
        updateTrend?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json':
            | components['schemas']['WidgetBugsByUseCase']
            | components['schemas']['WidgetBugsByDevice']
            | components['schemas']['WidgetCampaignProgress']
            | components['schemas']['WidgetCampaignUniqueBugs']
            | components['schemas']['WidgetBugsByDuplicates']
            | components['schemas']['WidgetCampaignUxTaggingVideoCompletionData']
            | components['schemas']['WidgetCampaignUxTotalTitlesVsRecurrentTitles']
            | components['schemas']['WidgetCampaignUxSeveritiesDistribution']
            | components['schemas']['WidgetCampaignUxMostUsedTitles'];
        };
      };
      400: components['responses']['Error'];
      401: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  'get-insights-iid': {
    parameters: {
      path: {
        /** Insight id */
        iid: components['parameters']['iid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Insight'];
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  'delete-insights-iid': {
    parameters: {
      path: {
        /** Insight id */
        iid: components['parameters']['iid'];
      };
    };
    responses: {
      /** OK */
      200: unknown;
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  'patch-insights-iid': {
    parameters: {
      path: {
        /** Insight id */
        iid: components['parameters']['iid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Insight'];
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
    requestBody: {
      content: {
        'application/json': {
          title?: string;
          description?: string;
          severity_id?: number;
          observations_ids?: number[];
          comment?: string;
          visible?: number;
        };
      };
    };
  };
  'get-media-id': {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Found */
      302: never;
    };
  };
  /** Delete a media-comment */
  'delete-media-comment-mcid': {
    parameters: {
      path: {
        mcid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': { [key: string]: unknown };
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  'post-projects': {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Project'];
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      404: components['responses']['Error'];
      500: components['responses']['Error'];
    };
    requestBody: components['requestBodies']['Project'];
  };
  /** Retrieve projects details from an ID. */
  'get-projects-projectId': {
    parameters: {
      path: {
        /** Project id */
        pid: components['parameters']['pid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Project'];
        };
      };
      400: components['responses']['Error'];
      401: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  /** Update fields of a specific project. Currently only the project name is editable. */
  'patch-projects-pid': {
    parameters: {
      path: {
        /** Project id */
        pid: components['parameters']['pid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Project'];
        };
      };
      400: components['responses']['Error'];
      401: components['responses']['Error'];
      403: components['responses']['Error'];
      405: components['responses']['Error'];
      500: components['responses']['Error'];
    };
    requestBody: {
      content: {
        'application/json': {
          display_name: string;
        };
      };
    };
  };
  'get-project-campaigns': {
    parameters: {
      path: {
        /** Project id */
        pid: components['parameters']['pid'];
      };
      query: {
        /** Limit pagination parameter */
        limit?: components['parameters']['limit'];
        /** Start pagination parameter */
        start?: components['parameters']['start'];
        /** Order value (ASC, DESC) */
        order?: components['parameters']['order'];
        /** Order by accepted field */
        orderBy?: components['parameters']['orderBy'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            items?: components['schemas']['CampaignWithOutput'][];
            start?: number;
            limit?: number;
            size?: number;
            total?: number;
          };
        };
      };
      400: components['responses']['Error'];
      401: components['responses']['Error'];
      403: components['responses']['Error'];
      404: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  /** Return a list of users from a specific project */
  'get-projects-users': {
    parameters: {
      path: {
        /** Project id */
        pid: components['parameters']['pid'];
      };
      query: {
        /** Limit pagination parameter */
        limit?: components['parameters']['limit'];
        /** Start pagination parameter */
        start?: components['parameters']['start'];
        /** Order value (ASC, DESC) */
        order?: components['parameters']['order'];
        /** Order by accepted field */
        orderBy?: components['parameters']['orderBy'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            items: components['schemas']['Tenant'][];
            start?: number;
            limit?: number;
            size?: number;
            total?: number;
          };
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  /** Use this to add a new or existent user into a specific project. */
  'post-projects-pid-users': {
    parameters: {
      path: {
        /** Project id */
        pid: components['parameters']['pid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            profile_id: number;
            tryber_wp_user_id: number;
            email: string;
          };
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
    requestBody: components['requestBodies']['Invitation'];
  };
  /** Remove an user from project */
  'delete-projects-pid-users': {
    parameters: {
      path: {
        /** Project id */
        pid: components['parameters']['pid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            items: components['schemas']['Tenant'][];
          };
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description Tryber WP USER ID */
          user_id: number;
          include_shared?: boolean;
        };
      };
    };
  };
  /** Retrieve all available use case templates */
  'get-templates': {
    parameters: {
      query: {
        /** filterBy[<fieldName>]=<fieldValue> */
        filterBy?: components['parameters']['filterBy'];
        /** Order value (ASC, DESC) */
        order?: components['parameters']['order'];
        /** Order by accepted field */
        orderBy?: components['parameters']['orderBy'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': ({
            id?: number;
          } & components['schemas']['Template'])[];
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  'get-users-me': {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['User'];
        };
      };
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  'get-users-me-preferences': {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            items?: components['schemas']['UserPreference'][];
          };
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  'put-users-me-preferences-prefid': {
    parameters: {
      path: {
        prefid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['UserPreference'];
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
    requestBody: {
      content: {
        'application/json': {
          value: number;
        };
      };
    };
  };
  /** Retrive single video data */
  'get-videos-vid': {
    parameters: {
      path: {
        vid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Video'] & {
            usecase: {
              id: number;
              name: string;
            };
          };
        };
      };
    };
  };
  /** Retrive all observations of a specific video */
  'get-videos-vid-observations': {
    parameters: {
      path: {
        vid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Observation'][];
        };
      };
    };
  };
  'post-videos-vid-observations': {
    parameters: {
      path: {
        vid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Observation'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** Format: float */
          start: number;
          /** Format: float */
          end: number;
        };
      };
    };
  };
  /** delete an observation */
  'delete-videos-vid-observations-oid': {
    parameters: {
      path: {
        vid: string;
        oid: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /** Update partial data of a video observation. */
  'patch-videos-vid-observations-oid': {
    parameters: {
      path: {
        vid: string;
        oid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Observation'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          title?: string;
          description?: string;
          /** Format: float */
          start?: number;
          /** Format: float */
          end?: number;
          quotes?: string;
          tags?: number[];
        };
      };
    };
  };
  'post-videos-vid-translation': {
    parameters: {
      path: {
        vid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            sentences: {
              start: number;
              text: string;
              end: number;
            }[];
          };
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
    requestBody: {
      content: {
        'application/json': {
          language: string;
        };
      };
    };
  };
  'get-workspaces': {
    parameters: {
      query: {
        /** Limit pagination parameter */
        limit?: components['parameters']['limit'];
        /** Start pagination parameter */
        start?: components['parameters']['start'];
        /** Order value (ASC, DESC) */
        order?: components['parameters']['order'];
        /** Order by accepted field */
        orderBy?: components['parameters']['orderBy'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            items?: components['schemas']['Workspace'][];
            start?: number;
            limit?: number;
            size?: number;
            total?: number;
          };
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      404: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  /** This endpoint is useful to add a new workspace. Only admin can use this. */
  'post-workspaces': {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            id: number;
            company: string;
          };
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
    requestBody: {
      content: {
        'application/json': {
          company: string;
          pm_id?: number;
        };
      };
    };
  };
  'get-workspace': {
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components['parameters']['wid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Workspace'];
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      404: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  'get-workspace-campaigns': {
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components['parameters']['wid'];
      };
      query: {
        /** Limit pagination parameter */
        limit?: components['parameters']['limit'];
        /** Start pagination parameter */
        start?: components['parameters']['start'];
        /** Order value (ASC, DESC) */
        order?: components['parameters']['order'];
        /** Order by accepted field */
        orderBy?: components['parameters']['orderBy'];
        /** filterBy[<fieldName>]=<fieldValue> */
        filterBy?: components['parameters']['filterBy'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            items?: components['schemas']['CampaignWithOutput'][];
            start?: number;
            limit?: number;
            size?: number;
            total?: number;
          };
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      404: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  'get-workspaces-coins': {
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components['parameters']['wid'];
      };
      query: {
        /** Limit pagination parameter */
        limit?: components['parameters']['limit'];
        /** Start pagination parameter */
        start?: components['parameters']['start'];
        /** Order value (ASC, DESC) */
        order?: components['parameters']['order'];
        /** Order by accepted field */
        orderBy?: components['parameters']['orderBy'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            items?: components['schemas']['Coin'][];
            start?: number;
            limit?: number;
            size?: number;
            total?: number;
          };
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  'get-workspace-projects': {
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components['parameters']['wid'];
      };
      query: {
        /** Limit pagination parameter */
        limit?: components['parameters']['limit'];
        /** Start pagination parameter */
        start?: components['parameters']['start'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            items?: components['schemas']['Project'][];
            start?: number;
            limit?: number;
            size?: number;
            total?: number;
          };
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      404: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  'get-workspace-project': {
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components['parameters']['wid'];
        /** Project id */
        pid: components['parameters']['pid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Project'];
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      404: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  'get-workspace-project-campaigns': {
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components['parameters']['wid'];
        /** Project id */
        pid: components['parameters']['pid'];
      };
      query: {
        /** Limit pagination parameter */
        limit?: components['parameters']['limit'];
        /** Start pagination parameter */
        start?: components['parameters']['start'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            items?: components['schemas']['CampaignWithOutput'][];
            start?: number;
            limit?: number;
            size?: number;
            total?: number;
          };
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      404: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  /** Return a list of users from a specific workspace */
  'get-workspaces-users': {
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components['parameters']['wid'];
      };
      query: {
        /** Limit pagination parameter */
        limit?: components['parameters']['limit'];
        /** Start pagination parameter */
        start?: components['parameters']['start'];
        /** Order value (ASC, DESC) */
        order?: components['parameters']['order'];
        /** Order by accepted field */
        orderBy?: components['parameters']['orderBy'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            items: components['schemas']['Tenant'][];
            start?: number;
            limit?: number;
            size?: number;
            total?: number;
          };
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
  };
  /** Use this to add a new or existent user into a specific workspace. */
  'post-workspaces-wid-users': {
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components['parameters']['wid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            profile_id: number;
            tryber_wp_user_id: number;
            email: string;
          };
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
    requestBody: components['requestBodies']['Invitation'];
  };
  /** Remove an user from workspace */
  'delete-workspaces-wid-users': {
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components['parameters']['wid'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            items: components['schemas']['Tenant'][];
          };
        };
      };
      400: components['responses']['Error'];
      403: components['responses']['Error'];
      500: components['responses']['Error'];
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description Tryber WP USER ID */
          user_id: number;
          include_shared?: boolean;
        };
      };
    };
  };
}

export interface external {}
