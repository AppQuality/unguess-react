/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    /** Get all routes available for this apis */
    get: operations["get-root"];
    parameters: {};
  };
  "/analytics/views/campaigns/{cid}": {
    post: operations["post-analytics-views-campaigns-cid"];
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
  };
  "/authenticate": {
    /** A request to login with your username and password */
    post: operations["post-authenticate"];
  };
  "/campaigns/{cid}": {
    get: operations["get-campaign"];
    patch: operations["patch-campaigns"];
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
  };
  "/campaigns/{cid}/bugTypes": {
    get: operations["get-campaigns-cid-bug-types"];
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
  };
  "/campaigns/{cid}/bugs": {
    get: operations["get-campaigns-cid-bugs"];
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
  };
  "/campaigns/{cid}/bugs/{bid}": {
    get: operations["get-campaigns-single-bug"];
    patch: operations["patch-campaigns-cid-bugs-bid"];
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
        /** Defines an identifier for the bug object (BUG ID) */
        bid: components["parameters"]["bid"];
      };
    };
  };
  "/campaigns/{cid}/bugs/{bid}/comments": {
    get: operations["get-campaigns-cid-bugs-bid-comments"];
    post: operations["post-campaigns-cid-bugs-bid-comments"];
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
        /** Defines an identifier for the bug object (BUG ID) */
        bid: components["parameters"]["bid"];
      };
    };
  };
  "/campaigns/{cid}/bugs/{bid}/comments/{cmid}": {
    post: operations["post-campaigns-cid-bugs-bid-comments-cmid-media"];
    delete: operations["delete-campaigns-cid-bugs-bid-comments-cmid"];
    parameters: {
      path: {
        cid: string;
        bid: string;
        cmid: string;
      };
    };
  };
  "/campaigns/{cid}/bugs/{bid}/media": {
    post: operations["post-campaigns-cid-bugs-bid-media"];
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
        /** Defines an identifier for the bug object (BUG ID) */
        bid: string;
      };
    };
  };
  "/campaigns/{cid}/bugs/{bid}/siblings": {
    get: operations["get-campaigns-bug-siblings"];
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
        /** Defines an identifier for the bug object (BUG ID) */
        bid: string;
      };
    };
  };
  "/campaigns/{cid}/clusters": {
    get: operations["get-campaigns-cid-clusters"];
    parameters: {
      path: {
        cid: string;
      };
    };
  };
  "/campaigns/{cid}/custom_statuses": {
    get: operations["get-campaigns-cid-custom-statuses"];
    delete: operations["delete-campaigns-cid-custom_statuses"];
    patch: operations["patch-campaigns-cid-custom_statuses"];
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
  };
  "/campaigns/{cid}/devices": {
    get: operations["get-campaigns-cid-devices"];
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
  };
  "/campaigns/{cid}/findings/{fid}": {
    put: operations["put-campaigns-cid-findings-fid"];
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
        /** Finding id */
        fid: string;
      };
    };
  };
  "/campaigns/{cid}/insights": {
    get: operations["get-insights"];
    post: operations["post-insights"];
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
  };
  "/campaigns/{cid}/meta": {
    /** Used to extra info about a selected campaign */
    get: operations["get-campaigns-cid-meta"];
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
  };
  "/campaigns/{cid}/observations": {
    /**
     * Return all observations for a specificCampaigns.
     * You can group by observations for usecase and grapes (observations with same title) or get an ungrouped list.
     */
    get: operations["get-campaigns-cid-observations"];
    parameters: {
      path: {
        cid: string;
      };
    };
  };
  "/campaigns/{cid}/os": {
    get: operations["get-campaigns-cid-os"];
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
  };
  "/campaigns/{cid}/priorities": {
    get: operations["get-campaigns-cid-priorities"];
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
  };
  "/campaigns/{cid}/replicabilities": {
    /** Return all accepted replicabilities of a specific campaign */
    get: operations["get-campaigns-replicabilities"];
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
  };
  "/campaigns/{cid}/reports": {
    /** Return all available report of a specific campaign */
    get: operations["get-campaigns-reports"];
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
  };
  "/campaigns/{cid}/severities": {
    get: operations["get-campaigns-cid-severities"];
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
  };
  "/campaigns/{cid}/suggestions": {
    get: operations["get-campaigns-cid-suggestions"];
    post: operations["post-campaigns-cid-suggestions"];
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
  };
  "/campaigns/{cid}/tags": {
    get: operations["get-campaigns-cid-tags"];
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
  };
  "/campaigns/{cid}/usecases": {
    get: operations["get-campaigns-cid-usecases"];
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
  };
  "/campaigns/{cid}/users": {
    /** Return a list of users from a specific campaign */
    get: operations["get-campaign-users"];
    /** Use this to add a new or existent user into a specific campaign. */
    post: operations["post-campaign-cid-users"];
    /** Remove an user from campaign */
    delete: operations["delete-campaign-cid-users"];
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
  };
  "/campaigns/{cid}/ux": {
    get: operations["get-campaigns-cid-ux"];
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
  };
  "/campaigns/{cid}/video-tags": {
    /** Retrieve all groups of public ux-tags for a specific campaign */
    get: operations["get-campaigns-cid-video-tags"];
    /** Add videoTags with groups to a specific campaign */
    post: operations["post-campaigns-cid-video-tags"];
    parameters: {
      path: {
        cid: string;
      };
    };
  };
  "/campaigns/{cid}/videos": {
    /** Return all published video for a specific campaign */
    get: operations["get-campaigns-cid-videos"];
    parameters: {
      path: {
        cid: string;
      };
    };
  };
  "/campaigns/{cid}/widgets": {
    get: operations["get-campaigns-cid-widgets-wslug"];
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
  };
  "/insights/{iid}": {
    get: operations["get-insights-iid"];
    delete: operations["delete-insights-iid"];
    patch: operations["patch-insights-iid"];
    parameters: {
      path: {
        /** Insight id */
        iid: components["parameters"]["iid"];
      };
    };
  };
  "/invites/{profile}/{token}": {
    get: operations["get-invites-profile-token"];
    parameters: {
      path: {
        profile: string;
        token: string;
      };
    };
  };
  "/media-comment/{mcid}": {
    /** Delete a media-comment */
    delete: operations["delete-media-comment-mcid"];
    parameters: {
      path: {
        mcid: string;
      };
    };
  };
  "/media/{id}": {
    get: operations["get-media-id"];
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/plans/{pid}": {
    /**  */
    get: operations["get-workspaces-wid-plans-pid"];
    delete: operations["delete-workspaces-wid-plans-pid"];
    patch: operations["patch-workspaces-wid-plans-pid"];
    parameters: {
      path: {
        pid: string;
      };
    };
  };
  "/plans/{pid}/status": {
    /**  */
    patch: operations["patch-workspaces-wid-plans-pid-status"];
    parameters: {
      path: {
        pid: string;
      };
    };
  };
  "/projects": {
    post: operations["post-projects"];
  };
  "/projects/{pid}": {
    /** Retrieve projects details from an ID. */
    get: operations["get-projects-projectId"];
    delete: operations["delete-projects-projectId"];
    /** Update fields of a specific project. Currently only the project name is editable. */
    patch: operations["patch-projects-pid"];
    parameters: {
      path: {
        /** Project id */
        pid: components["parameters"]["pid"];
      };
    };
  };
  "/projects/{pid}/campaigns": {
    get: operations["get-project-campaigns"];
    parameters: {
      path: {
        /** Project id */
        pid: components["parameters"]["pid"];
      };
    };
  };
  "/projects/{pid}/users": {
    /** Return a list of users from a specific project */
    get: operations["get-projects-users"];
    /** Use this to add a new or existent user into a specific project. */
    post: operations["post-projects-pid-users"];
    /** Remove an user from project */
    delete: operations["delete-projects-pid-users"];
    parameters: {
      path: {
        /** Project id */
        pid: components["parameters"]["pid"];
      };
    };
  };
  "/public/bugs/{defectId}/tokens/{token}": {
    get: operations["get-public-bugs-defectId-tokens-token"];
    parameters: {
      path: {
        /** Public bug link id */
        defectId: number;
        token: string;
      };
    };
  };
  "/users": {
    post: operations["post-users"];
    parameters: {};
  };
  "/users/by-email/{email}": {
    head: operations["head-users-by-email-email"];
    parameters: {
      path: {
        email: string;
      };
    };
  };
  "/users/me": {
    get: operations["get-users-me"];
    /** Update one or multiple user data */
    patch: operations["patch-users-me"];
  };
  "/users/me/preferences": {
    get: operations["get-users-me-preferences"];
  };
  "/users/me/preferences/{slug}": {
    put: operations["put-users-me-preferences-slug"];
    parameters: {
      path: {
        slug: string;
      };
    };
  };
  "/users/roles": {
    get: operations["get-users-roles"];
    parameters: {};
  };
  "/videos/{vid}": {
    /** Retrive single video data */
    get: operations["get-videos-vid"];
    parameters: {
      path: {
        vid: string;
      };
    };
  };
  "/videos/{vid}/observations": {
    /** Retrive all observations of a specific video */
    get: operations["get-videos-vid-observations"];
    post: operations["post-videos-vid-observations"];
    parameters: {
      path: {
        vid: string;
      };
    };
  };
  "/videos/{vid}/observations/{oid}": {
    /** delete an observation */
    delete: operations["delete-videos-vid-observations-oid"];
    /** Update partial data of a video observation. */
    patch: operations["patch-videos-vid-observations-oid"];
    parameters: {
      path: {
        vid: string;
        oid: string;
      };
    };
  };
  "/videos/{vid}/translation": {
    /** Return, if exists, a valid translation in the user preferred language or in the requested language (if provided) */
    get: operations["get-videos-vid-translation"];
    /**
     * This endpoint generates a new translation for the provided video if it does not already exist.
     *
     * **Security**: Requires Bearer Authentication. Provide your bearer token in the Authorization header when making requests to protected resources. Example: Authorization: Bearer 123.
     *
     * **Path Parameters**:
     *
     * vid (string, required): The ID of the video for which the translation is to be generated.
     * Request Body (application/json):
     *
     * language (string, required): The language code for the desired translation.
     */
    post: operations["post-videos-vid-translation"];
    parameters: {
      path: {
        vid: string;
      };
    };
  };
  "/workspaces": {
    get: operations["get-workspaces"];
    /** This endpoint is useful to add a new workspace. Only admin can use this. */
    post: operations["post-workspaces"];
  };
  "/workspaces/{wid}": {
    get: operations["get-workspace"];
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components["parameters"]["wid"];
      };
    };
  };
  "/workspaces/{wid}/archive": {
    /** Return the project Archive of a specific workspace. If not exist, create and return it */
    get: operations["get-workspaces-wid-archive"];
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: string;
      };
    };
  };
  "/workspaces/{wid}/campaigns": {
    get: operations["get-workspace-campaigns"];
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components["parameters"]["wid"];
      };
    };
  };
  "/workspaces/{wid}/coins": {
    get: operations["get-workspaces-coins"];
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components["parameters"]["wid"];
      };
    };
  };
  "/workspaces/{wid}/plans": {
    /**
     * Function: Retrieves all plans within a specified workspace.
     * Plan Status: Includes plans in a working state, such as those that are in the "draft" or "pending review" stages. Also includes plans that are "approved," provided there is no active campaign currently linked to them.
     *
     * Use Cases:
     * - Reviewing all plans that are still in development or awaiting approval.
     * - Identifying approved plans that are not yet associated with any running campaigns.
     */
    get: operations["get-workspaces-wid-plans"];
    post: operations["post-workspaces-wid-plans"];
    parameters: {
      path: {
        wid: string;
      };
    };
  };
  "/workspaces/{wid}/projects": {
    get: operations["get-workspace-projects"];
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components["parameters"]["wid"];
      };
    };
  };
  "/workspaces/{wid}/projects/{pid}": {
    get: operations["get-workspace-project"];
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components["parameters"]["wid"];
        /** Project id */
        pid: components["parameters"]["pid"];
      };
    };
  };
  "/workspaces/{wid}/projects/{pid}/campaigns": {
    get: operations["get-workspace-project-campaigns"];
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components["parameters"]["wid"];
        /** Project id */
        pid: components["parameters"]["pid"];
      };
    };
  };
  "/workspaces/{wid}/templates": {
    get: operations["get-workspaces-templates"];
    post: operations["post-workspaces-wid-templates"];
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: string;
      };
    };
  };
  "/workspaces/{wid}/templates/{tid}": {
    get: operations["get-workspaces-wid-templates-tid"];
    delete: operations["delete-workspaces-wid-templates-tid"];
    parameters: {
      path: {
        wid: string;
        tid: string;
      };
    };
  };
  "/workspaces/{wid}/users": {
    /** Return a list of users from a specific workspace */
    get: operations["get-workspaces-users"];
    /** Use this to add a new or existent user into a specific workspace. */
    post: operations["post-workspaces-wid-users"];
    /** Remove an user from workspace */
    delete: operations["delete-workspaces-wid-users"];
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components["parameters"]["wid"];
      };
    };
  };
  "/companies/sizes": {
    get: operations["get-companies-sizes"];
  };
}

export interface components {
  schemas: {
    /** Authentication */
    Authentication: {
      /** Format: email */
      email: string;
      exp?: number;
      iat?: number;
      id: number;
      name: string;
      picture?: string;
      role: string;
      token: string;
    };
    /**
     * BannerType
     * @enum {string}
     */
    BannerType:
      | "banner_testing_automation"
      | "banner_user_experience"
      | "banner_cyber_security";
    /** Bug */
    Bug: {
      application_section: {
        id?: number;
        prefix_title?: string;
        simple_title?: string;
        title?: string;
      };
      campaign_id: number;
      created: string;
      current_result: string;
      custom_status: components["schemas"]["BugCustomStatus"];
      device:
        | components["schemas"]["Smartphone"]
        | components["schemas"]["Tablet"]
        | components["schemas"]["Desktop"];
      duplicated_of_id?: number;
      expected_result: string;
      id: number;
      internal_id: string;
      is_favorite?: number;
      note?: string;
      occurred_date: string;
      priority: components["schemas"]["BugPriority"];
      read?: boolean;
      replicability: components["schemas"]["BugReplicability"];
      severity: components["schemas"]["BugSeverity"];
      status: components["schemas"]["BugStatus"];
      step_by_step: string;
      title: components["schemas"]["BugTitle"];
      type: components["schemas"]["BugType"];
      updated?: string;
    };
    /**
     * BugAdditionalField
     * @description Describe any additional info
     */
    BugAdditionalField: {
      id: number;
      name: string;
      value: string;
    } & (
      | components["schemas"]["BugAdditionalFieldRegex"]
      | components["schemas"]["BugAdditionalFieldSelect"]
    );
    /** BugAdditionalFieldRegex */
    BugAdditionalFieldRegex: {
      /** @enum {string} */
      kind: "regex";
      validation: string;
    };
    /** BugAdditionalFieldSelect */
    BugAdditionalFieldSelect: {
      /** @enum {string} */
      kind: "select";
      options: string[];
    };
    /** BugComment */
    BugComment: {
      creation_date: string;
      creator: {
        id: number;
        isInternal: boolean;
        name: string;
      };
      id: number;
      media?: {
        id: number;
        type: string;
        url: string;
      }[];
      text: string;
    };
    /** BugCustomStatus */
    BugCustomStatus: {
      color: string;
      id: number;
      is_default: number;
      name: string;
      phase: components["schemas"]["BugCustomStatusPhase"];
    };
    /** BugCustomStatusPhase */
    BugCustomStatusPhase: {
      id: number;
      name: string;
    };
    /** BugMedia */
    BugMedia: {
      creation_date: string;
      mime_type: {
        extension: string;
        /** @enum {string} */
        type: "video" | "image" | "other";
      };
      /** Format: uri */
      url: string;
    };
    /** BugPriority */
    BugPriority: {
      id: number;
      name: string;
    };
    /** BugReplicability */
    BugReplicability: {
      id: number;
      name: string;
    };
    /** BugSeverity */
    BugSeverity: {
      id: number;
      name: string;
    };
    /** BugStatus */
    BugStatus: {
      id: number;
      name: string;
    };
    /** BugTag */
    BugTag: {
      author_tid?: number;
      author_wp_id?: number;
      bug_id: number;
      campaign_id: number;
      creation_date: string;
      id: number;
      is_visible_to_customer?: number;
      name: string;
      slug: string;
      tag_id: number;
    };
    /** BugTitle */
    BugTitle: {
      /** @description Bug title without context. */
      compact: string;
      context?: string[];
      full: string;
    };
    /** BugType */
    BugType: {
      id: number;
      name: string;
    };
    /** Campaign */
    Campaign: {
      base_bug_internal_id?: string;
      /**
       * @description -1: no bug form;
       * 0: only bug form;
       * 1: bug form with bug parade;
       */
      bug_form?: number;
      close_date: string;
      customer_title: string;
      description?: string;
      end_date: string;
      family: {
        id: number;
        name: string;
      };
      id: number;
      is_public: number;
      project: {
        id: number;
        name: string;
      };
      start_date: string;
      status: {
        id: number;
        name: string;
      };
      title: string;
      type: {
        id: number;
        name: string;
      };
      workspace: {
        id: number;
        name: string;
      };
    };
    /** CampaignWithOutput */
    CampaignWithOutput: components["schemas"]["Campaign"] & {
      outputs?: components["schemas"]["Output"][];
    };
    /** Cluster */
    Cluster: {
      id: number;
      name: string;
    };
    /**
     * Coin
     * @description A coin package is a set of coins (free or paid).
     * The coin only valid currency in order to run an express campaign (no matter what type of express)
     */
    Coin: {
      agreement_id?: number;
      /** @description Number of available coin */
      amount: number;
      created_on?: string;
      customer_id: number;
      id: number;
      /**
       * Format: float
       * @description This is the single coin price
       * @default 0
       */
      price?: number;
      /** @description On each coin use, the related package will be updated */
      updated_on?: string;
    };
    /** CpReqTemplate */
    CpReqTemplate: {
      config: string;
      description?: string;
      id: number;
      name: string;
      price?: string;
      strapi?: components["schemas"]["StrapiTemplate"];
      workspace_id?: number;
    };
    /** Desktop */
    Desktop: {
      desktop_type: string;
      os: string;
      os_version: string;
      /** @enum {string} */
      type: "desktop";
    };
    /** Error */
    Error: {
      code: number;
      error: boolean;
      message: string;
    };
    /**
     * Feature
     * @description Flags used to enable functionality to some users
     */
    Feature: {
      name?: string;
      slug?: string;
    };
    /** Generic Device */
    GenericDevice: {
      os?: string;
      os_version?: string;
      type?: string;
    };
    /** Grape */
    Grapes: {
      observations: (components["schemas"]["Observation"] & {
        deviceType: string;
        mediaId: number;
        uploaderId: number;
        usecaseTitle: string;
      })[];
      severity: string;
      title: string;
      usersNumber: number;
    };
    /** Insight */
    Insight: {
      comment?: string;
      description: string;
      id: number;
      observations: (components["schemas"]["Observation"] & {
        uploaderId: number;
        usecaseTitle: string;
        video: {
          deviceType: string;
          id: number;
        };
      })[];
      severity: {
        id: number;
        name: string;
        style: string;
      };
      title: string;
      visible?: number;
    };
    MediaSentiment: {
      paragraphs: {
        end: number;
        reason: string;
        start: number;
        value: number;
      }[];
      reason: string;
      value: number;
    };
    Module:
      | components["schemas"]["ModuleTitle"]
      | components["schemas"]["ModuleDate"]
      | components["schemas"]["ModuleTask"]
      | components["schemas"]["ModuleAge"]
      | components["schemas"]["ModuleLanguage"]
      | components["schemas"]["ModuleLiteracy"]
      | components["schemas"]["ModuleTarget"]
      | components["schemas"]["ModuleGoal"]
      | components["schemas"]["ModuleGender"]
      | components["schemas"]["ModuleOutOfScope"]
      | components["schemas"]["ModuleBrowser"]
      | components["schemas"]["ModuleTargetNote"]
      | components["schemas"]["ModuleInstructionNote"]
      | components["schemas"]["ModuleSetupNote"]
      | components["schemas"]["ModuleTouchpoints"]
      | components["schemas"]["ModuleAdditionalTarget"]
      | components["schemas"]["ModuleEmployment"]
      | components["schemas"]["ModuleLocality"]
      | components["schemas"]["ModuleBank"]
      | components["schemas"]["ModuleElettricitySupply"]
      | components["schemas"]["ModuleMobileInternet"]
      | components["schemas"]["ModuleHomeInternet"]
      | components["schemas"]["ModuleGasSupply"]
      | components["schemas"]["ModuleAnnualIncomeRange"];
    /** ModuleAdditionalTarget */
    ModuleAdditionalTarget: {
      output: string;
      /** @enum {string} */
      type: "additional_target";
      variant: string;
    };
    /** ModuleAge */
    ModuleAge: {
      output: components["schemas"]["OutputModuleAge"];
      /** @enum {string} */
      type: "age";
      variant: string;
    };
    /** ModuleAnnualIncomeRange */
    ModuleAnnualIncomeRange: {
      output: components["schemas"]["OutputModuleIncomeRange"];
      /** @enum {string} */
      type: "annual_income_range";
      variant: string;
    };
    /** ModuleBank */
    ModuleBank: {
      output: components["schemas"]["OutputServiceProviders"];
      /** @enum {string} */
      type: "bank";
      variant: string;
    };
    /** ModuleBrowser */
    ModuleBrowser: {
      output: components["schemas"]["OutputModuleBrowser"];
      /** @enum {string} */
      type: "browser";
      variant: string;
    };
    ModuleDate: {
      output: {
        start: string;
      };
      /** @enum {string} */
      type: "dates";
      variant: string;
    };
    /** ModuleElettricitySupply */
    ModuleElettricitySupply: {
      output: components["schemas"]["OutputServiceProviders"];
      /** @enum {string} */
      type: "elettricity_supply";
      variant: string;
    };
    /** ModuleEmployment */
    ModuleEmployment: {
      /** @description cuf values of cuf employment */
      output: (
        | "EMPLOYEE"
        | "FREELANCER"
        | "RETIRED"
        | "STUDENT"
        | "UNEMPLOYED"
        | "HOMEMAKER"
      )[];
      /** @enum {string} */
      type: "employment";
      variant: string;
    };
    /** ModuleGasSupply */
    ModuleGasSupply: {
      output: components["schemas"]["OutputServiceProviders"];
      /** @enum {string} */
      type: "gas_supply";
      variant: string;
    };
    /** ModuleGender */
    ModuleGender: {
      output: components["schemas"]["OutputModuleGender"];
      /** @enum {string} */
      type: "gender";
      variant: string;
    };
    ModuleGoal: {
      output: string;
      /** @enum {string} */
      type: "goal";
      variant: string;
    };
    /** ModuleHomeInternet */
    ModuleHomeInternet: {
      output: components["schemas"]["OutputServiceProviders"];
      /** @enum {string} */
      type: "home_internet";
      variant: string;
    };
    /** ModuleInstructionNote */
    ModuleInstructionNote: {
      output: string;
      /** @enum {string} */
      type: "instruction_note";
      variant: string;
    };
    /** ModuleLanguage */
    ModuleLanguage: {
      output: string;
      /** @enum {string} */
      type: "language";
      variant: string;
    };
    /** ModuleLiteracy */
    ModuleLiteracy: {
      output: components["schemas"]["OutputModuleLiteracy"];
      /** @enum {string} */
      type: "literacy";
      variant: string;
    };
    /** ModuleLocality */
    ModuleLocality: {
      output: components["schemas"]["OutputModuleLocality"];
      /** @enum {string} */
      type: "locality";
      variant: string;
    };
    /** ModuleMobileInternet */
    ModuleMobileInternet: {
      output: components["schemas"]["OutputServiceProviders"];
      /** @enum {string} */
      type: "mobile_internet";
      variant: string;
    };
    ModuleOutOfScope: {
      output: string;
      /** @enum {string} */
      type: "out_of_scope";
      variant: string;
    };
    /** ModuleSetupNote */
    ModuleSetupNote: {
      output: string;
      /** @enum {string} */
      type: "setup_note";
      variant: string;
    };
    /** ModuleTarget */
    ModuleTarget: {
      output: number;
      /** @enum {string} */
      type: "target";
      variant: string;
    };
    /** ModuleTargetNote */
    ModuleTargetNote: {
      output: string;
      /** @enum {string} */
      type: "target_note";
      variant: string;
    };
    /** ModuleTask */
    ModuleTask: {
      output: components["schemas"]["OutputModuleTask"][];
      /** @enum {string} */
      type: "tasks";
      variant: string;
    };
    ModuleTitle: {
      output: string;
      /** @enum {string} */
      type: "title";
      variant: string;
    };
    /** ModuleTouchpoints */
    ModuleTouchpoints: {
      output: components["schemas"]["OutputModuleTouchpoints"][];
      /** @enum {string} */
      type: "touchpoints";
      variant: string;
    };
    /** Observation */
    Observation: {
      description: string;
      /** Format: float */
      end: number;
      id: number;
      quotes: string;
      /** Format: float */
      start: number;
      tags: components["schemas"]["VideoTag"][];
      title: string;
      uxNote?: string;
    };
    /**
     * Output
     * @description campaign output item
     * @enum {string}
     */
    Output: "bugs" | "media" | "insights";
    /** OutputModuleAge */
    OutputModuleAge: {
      max: number;
      min: number;
      percentage: number;
    }[];
    /** OutputModuleBrowser */
    OutputModuleBrowser: {
      /** @enum {string} */
      name: "firefox" | "edge" | "chrome" | "safari";
      percentage: number;
    }[];
    /** OutputModuleGender */
    OutputModuleGender: {
      /** @enum {string} */
      gender: "male" | "female";
      percentage: number;
    }[];
    /** OutputModuleIncomeRange */
    OutputModuleIncomeRange: {
      max: number;
      min: number;
      percentage: number;
    }[];
    /** OutputModuleLiteracy */
    OutputModuleLiteracy: {
      /** @enum {string} */
      level: "beginner" | "intermediate" | "expert";
      percentage: number;
    }[];
    /** OutputModuleLocality */
    OutputModuleLocality: {
      type: string;
      values: string[];
    }[];
    /** SubcomponentTask */
    OutputModuleTask:
      | components["schemas"]["OutputModuleTaskVideo"]
      | components["schemas"]["OutputModuleTaskBug"]
      | components["schemas"]["OutputModuleTaskSurvey"]
      | components["schemas"]["OutputModuleTaskModerateVideo"]
      | components["schemas"]["OutputModuleTaskExplorativeBug"]
      | components["schemas"]["OutputModuleTaskAccessibility"];
    /** OutputModuleTaskAccessibility */
    OutputModuleTaskAccessibility: {
      description?: string;
      id?: string;
      /** @enum {string} */
      kind: "accessibility";
      title: string;
      /** Format: uri */
      url?: string;
    };
    /** SubcomponentTaskBug */
    OutputModuleTaskBug: {
      description?: string;
      id?: string;
      /** @enum {string} */
      kind: "bug";
      title: string;
      /** Format: uri */
      url?: string;
    };
    /** OutputModuleTaskExplorativeBug */
    OutputModuleTaskExplorativeBug: {
      description?: string;
      id?: string;
      /** @enum {string} */
      kind: "explorative-bug";
      title: string;
      /** Format: uri */
      url?: string;
    };
    /** OutputModuleTaskModerateVideo */
    OutputModuleTaskModerateVideo: {
      description?: string;
      id?: string;
      /** @enum {string} */
      kind: "moderate-video";
      title: string;
      /** Format: uri */
      url?: string;
    };
    /** SubcomponentTaskSurvey */
    OutputModuleTaskSurvey: {
      description?: string;
      id?: string;
      /** @enum {string} */
      kind: "survey";
      title: string;
      /** Format: uri */
      url?: string;
    };
    /** SubcomponentTaskVideo */
    OutputModuleTaskVideo: {
      description?: string;
      id?: string;
      /** @enum {string} */
      kind: "video";
      title: string;
      /** Format: uri */
      url?: string;
    };
    /** SubcomponentTouchpoints */
    OutputModuleTouchpoints:
      | components["schemas"]["OutputModuleTouchpointsAppDesktop"]
      | components["schemas"]["OutputModuleTouchpointsAppTablet"]
      | components["schemas"]["OutputModuleTouchpointsAppSmartphone"]
      | components["schemas"]["OutputModuleTouchpointsWebDesktop"]
      | components["schemas"]["OutputModuleTouchpointsWebTablet"]
      | components["schemas"]["OutputModuleTouchpointsWebSmartphone"];
    /** OutputModuleTouchpointsAppDesktop */
    OutputModuleTouchpointsAppDesktop: {
      /** @enum {undefined} */
      form_factor: "desktop";
      /** @enum {undefined} */
      kind: "app";
      os: {
        linux?: string;
        macos?: string;
        windows?: string;
      };
    };
    /** OutputModuleTouchpointsAppSmartphone */
    OutputModuleTouchpointsAppSmartphone: {
      /** @enum {undefined} */
      form_factor: "smartphone";
      /** @enum {undefined} */
      kind: "app";
      os: {
        android?: string;
        ios?: string;
      };
    };
    /** OutputModuleTouchpointsAppTablet */
    OutputModuleTouchpointsAppTablet: {
      /** @enum {undefined} */
      form_factor: "tablet";
      /** @enum {undefined} */
      kind: "app";
      os: {
        ios?: string;
        linux?: string;
        windows?: string;
      };
    };
    /** OutputModuleTouchpointsWebDesktop */
    OutputModuleTouchpointsWebDesktop: {
      /** @enum {undefined} */
      form_factor: "desktop";
      /** @enum {undefined} */
      kind: "web";
      os: {
        linux?: string;
        macos?: string;
        windows?: string;
      };
    };
    /** OutputModuleTouchpointsWebSmartphone */
    OutputModuleTouchpointsWebSmartphone: {
      /** @enum {undefined} */
      form_factor: "smartphone";
      /** @enum {undefined} */
      kind: "web";
      os: {
        android?: string;
        ios?: string;
      };
    };
    /** OutputModuleTouchpointsWebTablet */
    OutputModuleTouchpointsWebTablet: {
      /** @enum {undefined} */
      form_factor: "tablet";
      /** @enum {undefined} */
      kind: "web";
      os: {
        android?: string;
        ios?: string;
      };
    };
    OutputServiceProviders: {
      isOther?: number;
      name: string;
    }[];
    /** PaginationData */
    PaginationData: {
      limit?: number;
      size?: number;
      start?: number;
      total?: number;
    };
    Paragraph: {
      end: number;
      /** @description Id Of speaker */
      speaker?: number;
      start: number;
      text: string;
      words: components["schemas"]["Word"][];
    };
    /**
     * PlanStatus
     * @enum {string}
     */
    PlanStatus: "pending_review" | "draft" | "approved";
    /** Platform Object */
    Platform: {
      /**
       * @description form_factor
       *
       * 0 => smartphone,
       * 1 => tablet
       * 2 => pc
       * 3 => smartwatch
       * 4 => console
       * 5 => tv
       */
      deviceType: number;
      /** @description os */
      id: number;
    };
    /** Data for post-users request for invited user */
    PostUserInviteData: {
      profileId: number;
      token: string;
      /** @enum {string} */
      type: "invite";
    };
    /** Data for post-users request for new user */
    PostUserNewData: {
      email: string;
      /** @enum {string} */
      type: "new";
      workspace: string;
    };
    /** Project */
    Project: {
      campaigns_count: number;
      description?: string;
      id: number;
      is_archive?: number;
      name: string;
      workspaceId: number;
    };
    /** Report */
    Report: {
      creation_date?: string;
      description?: string;
      file_type?: {
        domain_name?: string;
        extension?: components["schemas"]["ReportExtensions"];
        type: string;
      };
      id?: number;
      title?: string;
      update_date?: string;
      url: string;
    };
    /**
     * ReportExtensions
     * @enum {string}
     */
    ReportExtensions:
      | "pdf"
      | "doc"
      | "docx"
      | "xls"
      | "xlsx"
      | "ppt"
      | "pptx"
      | "rar"
      | "txt"
      | "csv"
      | "zip"
      | "gzip"
      | "gz"
      | "7z";
    /** Smartphone */
    Smartphone: {
      manufacturer: string;
      model: string;
      os: string;
      os_version: string;
      /** @enum {string} */
      type: "smartphone";
    };
    StrapiTemplate: {
      background?: string;
      description: string;
      how?: {
        description: string;
        /** Format: uri */
        icon: string;
        title: string;
      }[];
      /** Format: uri */
      image?: string;
      /** Format: uri */
      output_image?: string;
      pre_title: string;
      price?: {
        /** @default 0 */
        is_strikethrough?: number;
        previous_price?: string;
        price: string;
      };
      requirements?: {
        description: string;
        list: string[];
      };
      tags: {
        /** Format: uri */
        icon: string;
        text: string;
      }[];
      title: string;
      what?: {
        description: string;
        goal: string;
      };
      why?: {
        advantages: string[];
        reasons: {
          description: string;
          /** Format: uri */
          icon: string;
          title: string;
        }[];
      };
    };
    /** Tablet */
    Tablet: {
      manufacturer: string;
      model: string;
      os: string;
      os_version: string;
      /** @enum {string} */
      type: "tablet";
    };
    /** Tenant */
    Tenant: {
      email: string;
      /** @description tryber wp_user_id */
      id: number;
      invitationPending: boolean;
      name: string;
      permissionFrom?: {
        id?: number;
        /** @enum {string} */
        type?: "workspace" | "project";
      };
      profile_id: number;
    };
    Transcript: {
      paragraphs: components["schemas"]["Paragraph"][];
      /** @description Number of spekers */
      speakers: number;
    };
    /** UseCase */
    UseCase: {
      description: string;
      link?: string;
      logged?: boolean;
      title: string;
    };
    /** User */
    User: {
      customer_role: string;
      /** Format: email */
      email: string;
      features?: components["schemas"]["Feature"][];
      first_name: string;
      /** @description This is the main id of the user. Currently is equal to tryber_wp_user_id */
      id: number;
      last_name: string;
      name: string;
      picture?: string;
      profile_id: number;
      role: string;
      tryber_wp_user_id: number;
      unguess_wp_user_id: number;
    };
    /** UserPreference */
    UserPreference: {
      name: string;
      preference_id: number;
      value: string;
    };
    /**
     * Video
     * @description Video uploaded from a user
     */
    Video: {
      duration?: number;
      id: number;
      poster?: string;
      sentiment?: components["schemas"]["MediaSentiment"];
      streamUrl?: string;
      tester: {
        device: {
          /** @enum {string} */
          type: "smartphone" | "tablet" | "desktop" | "other";
        };
        id: number;
        name: string;
        surname: string;
      };
      transcript?: components["schemas"]["Transcript"];
      url: string;
    };
    /** VideoTag */
    VideoTag: {
      group: {
        id: number;
        name: string;
      };
      tag: {
        id: number;
        name: string;
        style: string;
        usageNumber: number;
      };
    };
    /**
     * WidgetBugsByDevice
     * @description Returns a list of devices with the number of bugs
     */
    WidgetBugsByDevice: {
      data: ((
        | components["schemas"]["Smartphone"]
        | components["schemas"]["Desktop"]
        | components["schemas"]["Tablet"]
      ) & {
        /** @description Unique bugs */
        bugs: number;
        unique_bugs: number;
      })[];
      /**
       * @default bugsByDevice
       * @example bugsByDevice
       * @enum {string}
       */
      kind: "bugsByDevice";
    };
    /**
     * WidgetBugsByDuplicates
     * @description Returns the most 10 reported bugs ordered by numberd of duplicates
     */
    WidgetBugsByDuplicates: {
      data: (components["schemas"]["Bug"] & {
        duplicates: number;
      })[];
      /** @enum {string} */
      kind: "bugsByDuplicates";
    };
    /**
     * WidgetBugsByUseCase
     * @description Returns a list of use case with the number of bugs
     */
    WidgetBugsByUseCase: {
      data: {
        bugs: number;
        description: string;
        title: {
          full: string;
          info?: string;
          prefix?: string;
          simple?: string;
        };
        uniqueBugs?: number;
        usecase_completion?: number;
        usecase_id: number;
      }[];
      /**
       * @default bugsByUseCase
       * @example bugsByUseCase
       * @enum {string}
       */
      kind: "bugsByUseCase";
    };
    /**
     * WidgetCampaignProgress
     * @description Used to show an overview about a specific campaign.
     */
    WidgetCampaignProgress: {
      data: {
        end_date: string;
        /** @description Expected amount of hours required to complete the campaign */
        expected_duration: number;
        start_date: string;
        /** @description Number of hours from start_date */
        time_elapsed: number;
        /**
         * Format: float
         * @description Percentage fixed rate of completion
         * @enum {number}
         */
        usecase_completion: 12.5 | 37.5 | 62.5 | 87.5 | 100;
      };
      /**
       * @default campaignProgress
       * @example campaignProgress
       * @enum {string}
       */
      kind: "campaignProgress";
    };
    /**
     * WidgetCampaignUniqueBugs
     * @description Used to show an overview of unique bugs and its trent
     */
    WidgetCampaignUniqueBugs: {
      data: {
        total: number;
        trend: number;
        unique: number;
      };
      /**
       * @default campaignUniqueBugs
       * @example campaignUniqueBugs
       * @enum {string}
       */
      kind: "campaignUniqueBugs";
    };
    /** WidgetCampaignUxMostUsedTitles */
    WidgetCampaignUxMostUsedTitles: {
      data: {
        mostUsedTitles: {
          mainSeverityAssignment: string;
          title: string;
          usage: number;
        }[];
      };
      /** @enum {undefined} */
      kind: "uxMostUsedTitles";
    };
    /**
     * WidgetCampaignUxProgress
     * @description Used to show an overview of Ux progress
     */
    WidgetCampaignUxProgress: {
      data: {
        countMedia?: number;
        countMediaWithObservation?: number;
        countObservation?: number;
        countObservationNoTitle?: number;
        countRecurrentTitles?: number;
        countTitleTag?: number;
        mostUsedTitles?: {
          mainSeverityAssignment: string;
          title: string;
          usage: number;
        }[];
        severitiesDistribution?: {
          countMajorIssue: number;
          countMinorIssue: number;
          countObservations: number;
          countPositiveFindings: number;
        };
      };
      /**
       * @default uxTaggingVideoCompletion
       * @example uxTaggingVideoCompletion
       * @enum {string}
       */
      kind:
        | "uxTaggingVideoCompletion"
        | "uxTotalTitlesVsRecurrentTitles"
        | "uxSeveritiesDistribution"
        | "uxMostUsedTitles";
    };
    /** WidgetCampaignUxSeveritiesDistribution */
    WidgetCampaignUxSeveritiesDistribution: {
      data: {
        countObservations: number;
        severitiesDistribution: {
          countMajorIssue: number;
          countMinorIssue: number;
          countObservationSeverity: number;
          countPositiveFindings: number;
        };
      };
      /** @enum {undefined} */
      kind: "uxSeveritiesDistribution";
    };
    /** WidgetCampaignUxTaggingVideoCompletionData */
    WidgetCampaignUxTaggingVideoCompletionData: {
      data: {
        countMedia: number;
        countMediaWithObservation: number;
      };
      /** @enum {undefined} */
      kind: "uxTaggingVideoCompletion";
    };
    /** WidgetCampaignUxTotalTitlesVsRecurrentTitles */
    WidgetCampaignUxTotalTitlesVsRecurrentTitles: {
      data: {
        countObservationNoTitle: number;
        countRecurrentTitles: number;
        countTitleTag: number;
      };
      /** @enum {undefined} */
      kind: "uxTotalTitlesVsRecurrentTitles";
    };
    Word: {
      end: number;
      /** @description Id of Speaker */
      speaker?: number;
      start: number;
      word: string;
    };
    /**
     * Workspace
     * @description A workspace is the company area with projects and campaigns
     */
    Workspace: {
      /** @description express coins */
      coins?: number;
      company: string;
      csm: {
        email: string;
        id: number;
        name: string;
        picture?: string;
        profile_id: number;
        tryber_wp_user_id: number;
        url?: string;
      };
      id: number;
      /** @description Do this workspace have shared items? */
      isShared?: boolean;
      logo?: string;
      /** @description Number of shared items */
      sharedItems?: number;
      tokens: number;
    };
  };
  responses: {
    /** Shared error response */
    Error: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
  };
  parameters: {
    /** @description Defines an identifier for the bug object (BUG ID) */
    bid: string;
    /** @description Campaign id */
    cid: string;
    /** @description Custom Status id */
    csid: string;
    /** @description filterBy[<fieldName>]=<fieldValue> */
    filterBy: unknown;
    /** @description Insight id */
    iid: string;
    /** @description Limit pagination parameter */
    limit: number;
    /** @description Order value (ASC, DESC) */
    order: string;
    /** @description Order by accepted field */
    orderBy: string;
    /** @description Project id */
    pid: string;
    /** @description keywords to search */
    search: string;
    /** @description Start pagination parameter */
    start: number;
    /** @description Workspace (company, customer) id */
    wid: string;
    /** @description Campaign widget slug */
    wslug:
      | "bugs-by-usecase"
      | "bugs-by-device"
      | "cp-progress"
      | "unique-bugs"
      | "bugs-by-duplicates"
      | "ux-tagging-video-completion"
      | "ux-total-titles-vs-recurrent-titles"
      | "ux-severities-distribution"
      | "ux-most-used-titles";
  };
  requestBodies: {
    Campaign: {
      content: {
        "application/json": {
          base_bug_internal_id?: string;
          browsers?: number[];
          campaign_type_id: number;
          close_date: string;
          /** @description Used to check available coins */
          customer_id: number;
          customer_title?: string;
          description?: string;
          end_date: string;
          goal?: string;
          has_bug_form?: number;
          /** @description if has_bug_form is 0 this has to be 0 */
          has_bug_parade?: number;
          is_public?: number;
          languages?: string[];
          outOfScope?: string;
          /** @description Da togliere */
          page_manual_id?: number;
          /** @description Da togliere */
          page_preview_id?: number;
          platforms: components["schemas"]["Platform"][];
          pm_id: number;
          productLink?: string;
          productType?: number;
          project_id: number;
          start_date: string;
          status_id?: number;
          targetSize?: number;
          testDescription?: string;
          testerRequirements?: string;
          title: string;
          use_cases?: components["schemas"]["UseCase"][];
        };
      };
    };
    Credentials: {
      content: {
        "application/json": {
          password: string;
          username: string;
        };
      };
    };
    Invitation: {
      content: {
        "application/json": {
          email: string;
          event_name?: string;
          locale?: string;
          message?: string;
          name?: string;
          redirect_url?: string;
          surname?: string;
        };
      };
    };
    Project: {
      content: {
        "application/json": {
          customer_id: number;
          description?: string;
          name: string;
        };
      };
    };
  };
}

export interface operations {
  /** Get all routes available for this apis */
  "get-root": {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
      500: components["responses"]["Error"];
    };
  };
  "post-analytics-views-campaigns-cid": {
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            success?: boolean;
          };
        };
      };
      500: components["responses"]["Error"];
    };
  };
  /** A request to login with your username and password */
  "post-authenticate": {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Authentication"];
        };
      };
      500: components["responses"]["Error"];
    };
    requestBody: components["requestBodies"]["Credentials"];
  };
  "get-campaign": {
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CampaignWithOutput"] & {
            isArchived?: boolean;
            plan?: number;
          };
        };
      };
    };
  };
  "patch-campaigns": {
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Campaign"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          customer_title?: string;
          project_id?: number;
        };
      };
    };
  };
  "get-campaigns-cid-bug-types": {
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BugType"][];
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "get-campaigns-cid-bugs": {
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
      query: {
        /** Limit pagination parameter */
        limit?: components["parameters"]["limit"];
        /** Start pagination parameter */
        start?: components["parameters"]["start"];
        /** Order value (ASC, DESC) */
        order?: components["parameters"]["order"];
        /** Order by accepted field */
        orderBy?: components["parameters"]["orderBy"];
        /** filterBy[<fieldName>]=<fieldValue> */
        filterBy?: components["parameters"]["filterBy"];
        /** keywords to search */
        search?: components["parameters"]["search"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items?: (components["schemas"]["Bug"] & {
              additional_fields?: {
                name: string;
                slug: string;
                value: string;
              }[];
              comments: number;
              siblings: number;
              tags?: {
                tag_id: number;
                tag_name: string;
              }[];
            })[];
            limit?: number;
            size?: number;
            start?: number;
            total?: number;
          };
        };
      };
      400: components["responses"]["Error"];
      401: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "get-campaigns-single-bug": {
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
        /** Defines an identifier for the bug object (BUG ID) */
        bid: components["parameters"]["bid"];
      };
      header: {
        public_bug_token?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Bug"] & {
            additional_fields: components["schemas"]["BugAdditionalField"][];
            media: components["schemas"]["BugMedia"][];
            reporter: {
              name: string;
              tester_id: number;
            };
            tags: components["schemas"]["BugTag"][];
          };
        };
      };
      400: components["responses"]["Error"];
      401: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "patch-campaigns-cid-bugs-bid": {
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
        /** Defines an identifier for the bug object (BUG ID) */
        bid: components["parameters"]["bid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            custom_status?: components["schemas"]["BugCustomStatus"];
            priority?: components["schemas"]["BugPriority"];
            tags?: {
              tag_id: number;
              tag_name: string;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          custom_status_id?: number;
          priority_id?: number;
          tags?: (
            | {
                tag_id: number;
              }
            | {
                tag_name: string;
              }
          )[];
        };
      };
    };
  };
  "get-campaigns-cid-bugs-bid-comments": {
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
        /** Defines an identifier for the bug object (BUG ID) */
        bid: components["parameters"]["bid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items: components["schemas"]["BugComment"][];
          };
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "post-campaigns-cid-bugs-bid-comments": {
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
        /** Defines an identifier for the bug object (BUG ID) */
        bid: components["parameters"]["bid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BugComment"];
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
    requestBody: {
      content: {
        "application/json": {
          media_id?: {
            id: number;
          }[];
          mentioned?: {
            id: number;
          }[];
          text: string;
        };
      };
    };
  };
  "post-campaigns-cid-bugs-bid-comments-cmid-media": {
    parameters: {
      path: {
        cid: string;
        bid: string;
        cmid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            failed?: {
              /** @enum {string} */
              errorCode:
                | "FILE_TOO_BIG"
                | "INVALID_FILE_EXTENSION"
                | "GENERIC_ERROR";
              name: string;
            }[];
            files?: {
              name: string;
              path: string;
            }[];
            uploaded_ids?: {
              id: number;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          media: string | string[];
        };
      };
    };
  };
  "delete-campaigns-cid-bugs-bid-comments-cmid": {
    parameters: {
      path: {
        cid: string;
        bid: string;
        cmid: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
    requestBody: {
      content: {
        "application/json": { [key: string]: unknown };
      };
    };
  };
  "post-campaigns-cid-bugs-bid-media": {
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
        /** Defines an identifier for the bug object (BUG ID) */
        bid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            failed?: {
              /** @enum {string} */
              errorCode:
                | "FILE_TOO_BIG"
                | "INVALID_FILE_EXTENSION"
                | "GENERIC_ERROR";
              name: string;
            }[];
            uploaded_ids?: {
              id: number;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          media: string | string[];
        };
      };
    };
  };
  "get-campaigns-bug-siblings": {
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
        /** Defines an identifier for the bug object (BUG ID) */
        bid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            father?: {
              context?: string;
              device: string;
              id: number;
              os: {
                name: string;
                version: string;
              };
              title: {
                compact: string;
                context?: string[];
                full: string;
              };
            };
            siblings: {
              context?: string;
              device: string;
              id: number;
              os: {
                name: string;
                version: string;
              };
              title: {
                compact: string;
                context?: string[];
                full: string;
              };
            }[];
          };
        };
      };
      400: components["responses"]["Error"];
      401: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "get-campaigns-cid-clusters": {
    parameters: {
      path: {
        cid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items?: components["schemas"]["Cluster"][];
          };
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "get-campaigns-cid-custom-statuses": {
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BugCustomStatus"][];
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "delete-campaigns-cid-custom_statuses": {
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            status?: boolean;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          custom_status_id: number;
          to_custom_status_id?: number;
        }[];
      };
    };
  };
  "patch-campaigns-cid-custom_statuses": {
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BugCustomStatus"][];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          color: string;
          /** @description se esiste già questo parametro viene passato nel request body\r\nse invece non esiste ed il custom status deve essere creato, non viene passato */
          custom_status_id?: number;
          name: string;
        }[];
      };
    };
  };
  "get-campaigns-cid-devices": {
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            device: string;
          }[];
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "put-campaigns-cid-findings-fid": {
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
        /** Finding id */
        fid: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          comment: string;
        };
      };
    };
  };
  "get-insights": {
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": (components["schemas"]["Insight"] & {
            usecases: {
              id: number;
              name: string;
            }[];
          })[];
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "post-insights": {
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
    requestBody: {
      content: {
        "application/json": {
          comment?: string;
          description?: string;
          observations_ids: number[];
          severity_id: number;
          title: string;
          visible?: number;
        };
      };
    };
  };
  /** Used to extra info about a selected campaign */
  "get-campaigns-cid-meta": {
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Campaign"] & {
            /** @description Array of form factors */
            allowed_devices: string[];
            selected_testers: number;
          };
        };
      };
      400: components["responses"]["Error"];
      401: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  /**
   * Return all observations for a specificCampaigns.
   * You can group by observations for usecase and grapes (observations with same title) or get an ungrouped list.
   */
  "get-campaigns-cid-observations": {
    parameters: {
      path: {
        cid: string;
      };
      query: {
        groupBy?: "usecase-grapes";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json":
            | {
                /**
                 * @default usecase-grapes
                 * @example usecase-grapes
                 * @enum {string}
                 */
                kind: "usecase-grapes";
                results: {
                  grapes: components["schemas"]["Grapes"][];
                  ungrouped: (components["schemas"]["Observation"] & {
                    deviceType: string;
                    mediaId: number;
                    uploaderId: number;
                    usecaseTitle: string;
                  })[];
                  usecaseId: number;
                  usecaseTitle: string;
                }[];
              }
            | {
                /**
                 * @default ungrouped
                 * @example ungrouped
                 * @enum {string}
                 */
                kind: "ungrouped";
                results: (components["schemas"]["Observation"] & {
                  deviceType: string;
                  mediaId: number;
                  uploaderId: number;
                  usecaseTitle: string;
                })[];
              };
        };
      };
    };
  };
  "get-campaigns-cid-os": {
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            os: string;
          }[];
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "get-campaigns-cid-priorities": {
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BugPriority"][];
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  /** Return all accepted replicabilities of a specific campaign */
  "get-campaigns-replicabilities": {
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BugReplicability"][];
        };
      };
      /** Bad Request */
      400: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  /** Return all available report of a specific campaign */
  "get-campaigns-reports": {
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report"][];
        };
      };
    };
  };
  "get-campaigns-cid-severities": {
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BugSeverity"][];
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "get-campaigns-cid-suggestions": {
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            suggestion?: {
              /** @description ServiceId from strapi */
              serviceId?: number;
              slug: components["schemas"]["BannerType"];
            };
          };
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "post-campaigns-cid-suggestions": {
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          slug: components["schemas"]["BannerType"];
        };
      };
    };
  };
  "get-campaigns-cid-tags": {
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            display_name: string;
            is_public?: number;
            slug: string;
            tag_id: number;
          }[];
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "get-campaigns-cid-usecases": {
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
      query: {
        /** bugs, videos */
        filterBy?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            completion: number;
            content?: string;
            id: number;
            title: {
              full: string;
              info?: string;
              prefix?: string;
              simple?: string;
            };
          }[];
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  /** Return a list of users from a specific campaign */
  "get-campaign-users": {
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
      query: {
        /** Limit pagination parameter */
        limit?: components["parameters"]["limit"];
        /** Start pagination parameter */
        start?: components["parameters"]["start"];
        /** Order value (ASC, DESC) */
        order?: components["parameters"]["order"];
        /** Order by accepted field */
        orderBy?: components["parameters"]["orderBy"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items: components["schemas"]["Tenant"][];
            limit?: number;
            size?: number;
            start?: number;
            total?: number;
          };
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  /** Use this to add a new or existent user into a specific campaign. */
  "post-campaign-cid-users": {
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            email: string;
            profile_id: number;
            tryber_wp_user_id: number;
          };
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
    requestBody: components["requestBodies"]["Invitation"];
  };
  /** Remove an user from campaign */
  "delete-campaign-cid-users": {
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items: components["schemas"]["Tenant"][];
          };
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Tryber WP USER ID */
          user_id: number;
        };
      };
    };
  };
  "get-campaigns-cid-ux": {
    parameters: {
      path: {
        /** Campaign id */
        cid: string;
      };
      query: {
        showAsCustomer?: boolean;
        /** filterBy[<fieldName>]=<fieldValue> */
        filterBy?: components["parameters"]["filterBy"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            findings?: {
              cluster:
                | {
                    id: number;
                    name: string;
                  }[]
                | "all";
              comment?: string;
              description: string;
              /** @description this field is the Finding ID */
              id: number;
              severity: {
                id: number;
                name: string;
                style: string;
              };
              title: string;
              video?: {
                description?: string;
                end: number;
                poster?: string;
                start: number;
                streamUrl: string;
                url: string;
              }[];
            }[];
            goal?: string;
            methodology?: {
              description: string;
              type: string;
            };
            questions?: {
              text: string;
            }[];
            sentiment?: {
              cluster: {
                id: number;
                name: string;
              };
              comment: string;
              value: number;
            }[];
            users?: number;
          };
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      404: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  /** Retrieve all groups of public ux-tags for a specific campaign */
  "get-campaigns-cid-video-tags": {
    parameters: {
      path: {
        cid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            group: {
              id: number;
              name: string;
            };
            tags: {
              id: number;
              name: string;
              style: string;
              usageNumber: number;
            }[];
          }[];
        };
      };
    };
  };
  /** Add videoTags with groups to a specific campaign */
  "post-campaigns-cid-video-tags": {
    parameters: {
      path: {
        cid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["VideoTag"];
        };
      };
    };
    /** If there is a group, post new tag into that group; otherwise, create the group and add tag into the new group. */
    requestBody: {
      content: {
        "application/json": {
          group: {
            name: string;
          };
          tag: {
            name: string;
            style?: string;
          };
        };
      };
    };
  };
  /** Return all published video for a specific campaign */
  "get-campaigns-cid-videos": {
    parameters: {
      path: {
        cid: string;
      };
      query: {
        /** Limit pagination parameter */
        limit?: components["parameters"]["limit"];
        /** Start pagination parameter */
        start?: components["parameters"]["start"];
        /** Order value (ASC, DESC) */
        order?: components["parameters"]["order"];
        /** Order by accepted field */
        orderBy?: components["parameters"]["orderBy"];
        /** filterBy[<fieldName>]=<fieldValue> */
        filterBy?: components["parameters"]["filterBy"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items: (components["schemas"]["Video"] & {
              usecaseId: number;
            })[];
          } & components["schemas"]["PaginationData"];
        };
      };
    };
  };
  "get-campaigns-cid-widgets-wslug": {
    parameters: {
      path: {
        /** Campaign id */
        cid: components["parameters"]["cid"];
      };
      query: {
        /** Campaign widget slug */
        s: components["parameters"]["wslug"];
        /** should update bug trend after request resolves? */
        updateTrend?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json":
            | components["schemas"]["WidgetBugsByUseCase"]
            | components["schemas"]["WidgetBugsByDevice"]
            | components["schemas"]["WidgetCampaignProgress"]
            | components["schemas"]["WidgetCampaignUniqueBugs"]
            | components["schemas"]["WidgetBugsByDuplicates"]
            | components["schemas"]["WidgetCampaignUxTaggingVideoCompletionData"]
            | components["schemas"]["WidgetCampaignUxTotalTitlesVsRecurrentTitles"]
            | components["schemas"]["WidgetCampaignUxSeveritiesDistribution"]
            | components["schemas"]["WidgetCampaignUxMostUsedTitles"];
        };
      };
      400: components["responses"]["Error"];
      401: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "get-insights-iid": {
    parameters: {
      path: {
        /** Insight id */
        iid: components["parameters"]["iid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "delete-insights-iid": {
    parameters: {
      path: {
        /** Insight id */
        iid: components["parameters"]["iid"];
      };
    };
    responses: {
      /** OK */
      200: unknown;
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "patch-insights-iid": {
    parameters: {
      path: {
        /** Insight id */
        iid: components["parameters"]["iid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
    requestBody: {
      content: {
        "application/json": {
          comment?: string;
          description?: string;
          observations_ids?: number[];
          severity_id?: number;
          title?: string;
          visible?: number;
        };
      };
    };
  };
  "get-invites-profile-token": {
    parameters: {
      path: {
        profile: string;
        token: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            email: string;
            name: string;
            surname: string;
            workspace: string;
          };
        };
      };
      /** Bad Request */
      400: unknown;
    };
  };
  /** Delete a media-comment */
  "delete-media-comment-mcid": {
    parameters: {
      path: {
        mcid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  "get-media-id": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Found */
      302: never;
    };
  };
  /**  */
  "get-workspaces-wid-plans-pid": {
    parameters: {
      path: {
        pid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            campaign?: {
              id: number;
              startDate: string;
              /** @description CustomerTitle ?? Title */
              title: string;
            };
            config: {
              modules: components["schemas"]["Module"][];
            };
            id: number;
            project: {
              id: number;
              name: string;
            };
            quote?: {
              id: number;
              /** @enum {string} */
              status: "pending" | "proposed" | "approved" | "rejected";
              value: string;
            };
            status: components["schemas"]["PlanStatus"];
            workspace_id: number;
          };
        };
      };
    };
  };
  "delete-workspaces-wid-plans-pid": {
    parameters: {
      path: {
        pid: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  "patch-workspaces-wid-plans-pid": {
    parameters: {
      path: {
        pid: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          config: {
            modules: components["schemas"]["Module"][];
          };
        };
      };
    };
  };
  /**  */
  "patch-workspaces-wid-plans-pid-status": {
    parameters: {
      path: {
        pid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          status: components["schemas"]["PlanStatus"];
        };
      };
    };
  };
  "post-projects": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      404: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
    requestBody: components["requestBodies"]["Project"];
  };
  /** Retrieve projects details from an ID. */
  "get-projects-projectId": {
    parameters: {
      path: {
        /** Project id */
        pid: components["parameters"]["pid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      400: components["responses"]["Error"];
      401: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "delete-projects-projectId": {
    parameters: {
      path: {
        /** Project id */
        pid: components["parameters"]["pid"];
      };
    };
    responses: {
      /** OK */
      200: unknown;
      400: components["responses"]["Error"];
      401: components["responses"]["Error"];
      403: components["responses"]["Error"];
      405: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  /** Update fields of a specific project. Currently only the project name is editable. */
  "patch-projects-pid": {
    parameters: {
      path: {
        /** Project id */
        pid: components["parameters"]["pid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      400: components["responses"]["Error"];
      401: components["responses"]["Error"];
      403: components["responses"]["Error"];
      405: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
    requestBody: {
      content: {
        "application/json": Partial<{
          display_name: string;
        }> &
          Partial<{
            description: string;
          }>;
      };
    };
  };
  "get-project-campaigns": {
    parameters: {
      path: {
        /** Project id */
        pid: components["parameters"]["pid"];
      };
      query: {
        /** Limit pagination parameter */
        limit?: components["parameters"]["limit"];
        /** Start pagination parameter */
        start?: components["parameters"]["start"];
        /** Order value (ASC, DESC) */
        order?: components["parameters"]["order"];
        /** Order by accepted field */
        orderBy?: components["parameters"]["orderBy"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items?: components["schemas"]["CampaignWithOutput"][];
            limit?: number;
            size?: number;
            start?: number;
            total?: number;
          };
        };
      };
      400: components["responses"]["Error"];
      401: components["responses"]["Error"];
      403: components["responses"]["Error"];
      404: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  /** Return a list of users from a specific project */
  "get-projects-users": {
    parameters: {
      path: {
        /** Project id */
        pid: components["parameters"]["pid"];
      };
      query: {
        /** Limit pagination parameter */
        limit?: components["parameters"]["limit"];
        /** Start pagination parameter */
        start?: components["parameters"]["start"];
        /** Order value (ASC, DESC) */
        order?: components["parameters"]["order"];
        /** Order by accepted field */
        orderBy?: components["parameters"]["orderBy"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items: components["schemas"]["Tenant"][];
            limit?: number;
            size?: number;
            start?: number;
            total?: number;
          };
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  /** Use this to add a new or existent user into a specific project. */
  "post-projects-pid-users": {
    parameters: {
      path: {
        /** Project id */
        pid: components["parameters"]["pid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            email: string;
            profile_id: number;
            tryber_wp_user_id: number;
          };
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
    requestBody: components["requestBodies"]["Invitation"];
  };
  /** Remove an user from project */
  "delete-projects-pid-users": {
    parameters: {
      path: {
        /** Project id */
        pid: components["parameters"]["pid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items: components["schemas"]["Tenant"][];
          };
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
    requestBody: {
      content: {
        "application/json": {
          include_shared?: boolean;
          /** @description Tryber WP USER ID */
          user_id: number;
        };
      };
    };
  };
  "get-public-bugs-defectId-tokens-token": {
    parameters: {
      path: {
        /** Public bug link id */
        defectId: number;
        token: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            bugId: number;
            campaignId: number;
            campaignTitle: string;
          };
        };
      };
      /** Forbidden */
      403: unknown;
    };
  };
  "post-users": {
    parameters: {};
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": {
            projectId?: number;
            workspaceId: number;
          };
        };
      };
      400: components["responses"]["Error"];
    };
    requestBody: {
      content: {
        "application/json": {
          companySizeId: number;
          name: string;
          password: string;
          roleId: number;
          surname: string;
        } & (
          | components["schemas"]["PostUserInviteData"]
          | components["schemas"]["PostUserNewData"]
        );
      };
    };
  };
  "head-users-by-email-email": {
    parameters: {
      path: {
        email: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  "get-users-me": {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  /** Update one or multiple user data */
  "patch-users-me": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            name?: string;
            role?: string;
            surname?: string;
          };
        };
      };
      401: components["responses"]["Error"];
      403: components["responses"]["Error"];
    };
    requestBody: {
      content: {
        "application/json": {
          name?: string;
          password?: {
            current: string;
            new: string;
          };
          roleId?: number;
          surname?: string;
        };
      };
    };
  };
  "get-users-me-preferences": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items?: components["schemas"]["UserPreference"][];
          };
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "put-users-me-preferences-slug": {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserPreference"];
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
    requestBody: {
      content: {
        "application/json": {
          value: string;
        };
      };
    };
  };
  "get-users-roles": {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            name: string;
          }[];
        };
      };
    };
  };
  /** Retrive single video data */
  "get-videos-vid": {
    parameters: {
      path: {
        vid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Video"] & {
            usecase: {
              id: number;
              name: string;
            };
          } & {
            language: string;
          };
        };
      };
    };
  };
  /** Retrive all observations of a specific video */
  "get-videos-vid-observations": {
    parameters: {
      path: {
        vid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Observation"][];
        };
      };
    };
  };
  "post-videos-vid-observations": {
    parameters: {
      path: {
        vid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Observation"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Format: float */
          end: number;
          /** Format: float */
          start: number;
        };
      };
    };
  };
  /** delete an observation */
  "delete-videos-vid-observations-oid": {
    parameters: {
      path: {
        vid: string;
        oid: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /** Update partial data of a video observation. */
  "patch-videos-vid-observations-oid": {
    parameters: {
      path: {
        vid: string;
        oid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Observation"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          description?: string;
          /** Format: float */
          end?: number;
          quotes?: string;
          /** Format: float */
          start?: number;
          tags?: number[];
          title?: string;
        };
      };
    };
  };
  /** Return, if exists, a valid translation in the user preferred language or in the requested language (if provided) */
  "get-videos-vid-translation": {
    parameters: {
      path: {
        vid: string;
      };
      query: {
        /** language */
        lang?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            language: string;
            /** @default 0 */
            processing: number;
            sentences: {
              end: number;
              start: number;
              text: string;
            }[];
          };
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  /**
   * This endpoint generates a new translation for the provided video if it does not already exist.
   *
   * **Security**: Requires Bearer Authentication. Provide your bearer token in the Authorization header when making requests to protected resources. Example: Authorization: Bearer 123.
   *
   * **Path Parameters**:
   *
   * vid (string, required): The ID of the video for which the translation is to be generated.
   * Request Body (application/json):
   *
   * language (string, required): The language code for the desired translation.
   */
  "post-videos-vid-translation": {
    parameters: {
      path: {
        vid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
    requestBody: {
      content: {
        "application/json": {
          language: string;
        };
      };
    };
  };
  "get-workspaces": {
    parameters: {
      query: {
        /** Limit pagination parameter */
        limit?: components["parameters"]["limit"];
        /** Start pagination parameter */
        start?: components["parameters"]["start"];
        /** Order value (ASC, DESC) */
        order?: components["parameters"]["order"];
        /** Order by accepted field */
        orderBy?: components["parameters"]["orderBy"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items?: components["schemas"]["Workspace"][];
            limit?: number;
            size?: number;
            start?: number;
            total?: number;
          };
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      404: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  /** This endpoint is useful to add a new workspace. Only admin can use this. */
  "post-workspaces": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            company: string;
            id: number;
          };
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
    requestBody: {
      content: {
        "application/json": {
          company: string;
          pm_id?: number;
        };
      };
    };
  };
  "get-workspace": {
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components["parameters"]["wid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Workspace"];
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      404: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  /** Return the project Archive of a specific workspace. If not exist, create and return it */
  "get-workspaces-wid-archive": {
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            campaignsCounter: number;
            description: string;
            id: number;
            name: string;
          };
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "get-workspace-campaigns": {
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components["parameters"]["wid"];
      };
      query: {
        /** Limit pagination parameter */
        limit?: components["parameters"]["limit"];
        /** Start pagination parameter */
        start?: components["parameters"]["start"];
        /** Order value (ASC, DESC) */
        order?: components["parameters"]["order"];
        /** Order by accepted field */
        orderBy?: components["parameters"]["orderBy"];
        /** filterBy[<fieldName>]=<fieldValue> */
        filterBy?: components["parameters"]["filterBy"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items?: components["schemas"]["CampaignWithOutput"][];
            limit?: number;
            size?: number;
            start?: number;
            total?: number;
          };
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      404: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "get-workspaces-coins": {
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components["parameters"]["wid"];
      };
      query: {
        /** Limit pagination parameter */
        limit?: components["parameters"]["limit"];
        /** Start pagination parameter */
        start?: components["parameters"]["start"];
        /** Order value (ASC, DESC) */
        order?: components["parameters"]["order"];
        /** Order by accepted field */
        orderBy?: components["parameters"]["orderBy"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items?: components["schemas"]["Coin"][];
            limit?: number;
            size?: number;
            start?: number;
            total?: number;
          };
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  /**
   * Function: Retrieves all plans within a specified workspace.
   * Plan Status: Includes plans in a working state, such as those that are in the "draft" or "pending review" stages. Also includes plans that are "approved," provided there is no active campaign currently linked to them.
   *
   * Use Cases:
   * - Reviewing all plans that are still in development or awaiting approval.
   * - Identifying approved plans that are not yet associated with any running campaigns.
   */
  "get-workspaces-wid-plans": {
    parameters: {
      path: {
        wid: string;
      };
      query: {
        /** Order by accepted field */
        orderBy?: components["parameters"]["orderBy"];
        /** Order value (ASC, DESC) */
        order?: components["parameters"]["order"];
        /** filterBy[<fieldName>]=<fieldValue> */
        filterBy?: components["parameters"]["filterBy"];
        /** Limit pagination parameter */
        limit?: components["parameters"]["limit"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            project: {
              id: number;
              title: string;
            };
            quote?: {
              id: number;
              /** @enum {string} */
              status: "pending" | "proposed" | "approved" | "rejected";
            };
            /** @enum {string} */
            status: "draft" | "pending_review" | "approved";
            title: string;
          }[];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
    };
  };
  "post-workspaces-wid-plans": {
    parameters: {
      path: {
        wid: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": {
            id: number;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          project_id: number;
          template_id: number;
        };
      };
    };
  };
  "get-workspace-projects": {
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components["parameters"]["wid"];
      };
      query: {
        /** Limit pagination parameter */
        limit?: components["parameters"]["limit"];
        /** Start pagination parameter */
        start?: components["parameters"]["start"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items?: components["schemas"]["Project"][];
            limit?: number;
            size?: number;
            start?: number;
            total?: number;
          };
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      404: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "get-workspace-project": {
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components["parameters"]["wid"];
        /** Project id */
        pid: components["parameters"]["pid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      404: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "get-workspace-project-campaigns": {
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components["parameters"]["wid"];
        /** Project id */
        pid: components["parameters"]["pid"];
      };
      query: {
        /** Limit pagination parameter */
        limit?: components["parameters"]["limit"];
        /** Start pagination parameter */
        start?: components["parameters"]["start"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items?: components["schemas"]["CampaignWithOutput"][];
            limit?: number;
            size?: number;
            start?: number;
            total?: number;
          };
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      404: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "get-workspaces-templates": {
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: string;
      };
      query: {
        /** Limit pagination parameter */
        limit?: components["parameters"]["limit"];
        /** Start pagination parameter */
        start?: components["parameters"]["start"];
        /** Orders results */
        orderBy?: "updated_at" | "id" | "order";
        /** Order value (ASC, DESC) */
        order?: components["parameters"]["order"];
        /** filterBy[<fieldName>]=<fieldValue> */
        filterBy?: components["parameters"]["filterBy"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items: components["schemas"]["CpReqTemplate"][];
          } & components["schemas"]["PaginationData"];
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      404: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  "post-workspaces-wid-templates": {
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": {
            id: number;
          };
        };
      };
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          description?: string;
          from_plan: number;
          name: string;
        };
      };
    };
  };
  "get-workspaces-wid-templates-tid": {
    parameters: {
      path: {
        wid: string;
        tid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            config: string;
            description?: string;
            id: number;
            name: string;
            price?: string;
            strapi?: components["schemas"]["StrapiTemplate"];
            workspace_id?: number;
          };
        };
      };
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  "delete-workspaces-wid-templates-tid": {
    parameters: {
      path: {
        wid: string;
        tid: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
      /** Not Found */
      404: unknown;
    };
  };
  /** Return a list of users from a specific workspace */
  "get-workspaces-users": {
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components["parameters"]["wid"];
      };
      query: {
        /** Limit pagination parameter */
        limit?: components["parameters"]["limit"];
        /** Start pagination parameter */
        start?: components["parameters"]["start"];
        /** Order value (ASC, DESC) */
        order?: components["parameters"]["order"];
        /** Order by accepted field */
        orderBy?: components["parameters"]["orderBy"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items: components["schemas"]["Tenant"][];
            limit?: number;
            size?: number;
            start?: number;
            total?: number;
          };
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
  };
  /** Use this to add a new or existent user into a specific workspace. */
  "post-workspaces-wid-users": {
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components["parameters"]["wid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            email: string;
            profile_id: number;
            tryber_wp_user_id: number;
          };
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
    requestBody: components["requestBodies"]["Invitation"];
  };
  /** Remove an user from workspace */
  "delete-workspaces-wid-users": {
    parameters: {
      path: {
        /** Workspace (company, customer) id */
        wid: components["parameters"]["wid"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items: components["schemas"]["Tenant"][];
          };
        };
      };
      400: components["responses"]["Error"];
      403: components["responses"]["Error"];
      500: components["responses"]["Error"];
    };
    requestBody: {
      content: {
        "application/json": {
          include_shared?: boolean;
          /** @description Tryber WP USER ID */
          user_id: number;
        };
      };
    };
  };
  "get-companies-sizes": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            name: string;
          }[];
        };
      };
    };
  };
}

export interface external {}
